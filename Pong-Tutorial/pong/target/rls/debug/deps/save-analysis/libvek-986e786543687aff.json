{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0","program":"/Users/marcpartensky/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","vek","--edition=2018","/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=986e786543687aff","-C","extra-filename=-986e786543687aff","--out-dir","/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps","-L","dependency=/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps","--extern","approx=/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps/libapprox-6de525dc10f71b2b.rmeta","--extern","num_integer=/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps/libnum_integer-d6a651f58406118b.rmeta","--extern","num_traits=/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps/libnum_traits-38066099c85918d8.rmeta","--extern","static_assertions=/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps/libstatic_assertions-5af21dc0c28d661e.rmeta","--cap-lints","allow","--cfg","stable","--error-format=json","--sysroot","/Users/marcpartensky/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps/libvek-986e786543687aff.rmeta"},"prelude":{"crate_id":{"name":"vek","disambiguator":[16266361102826692797,3850985662760882383]},"crate_root":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src","external_crates":[{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[15010738070622620763,9605760616786660431]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8211843569075862794,5370502913999467694]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5168977417888994485,12129851499920233632]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":4,"id":{"name":"num_integer","disambiguator":[15442726777171473026,4236330964141687349]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[9176452395873514981,10525323411957323785]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":6,"id":{"name":"alloc","disambiguator":[9254821246596336482,1562696929571001984]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":7,"id":{"name":"libc","disambiguator":[4867494102928472883,16549916413327868340]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[12208796569805280475,9421298070223625802]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":9,"id":{"name":"cfg_if","disambiguator":[16776259526442764164,2692171601035033462]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":10,"id":{"name":"hashbrown","disambiguator":[8506315589905780113,7752550639658555424]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6004073670142137807,10055010459345902388]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[13812981793209371227,10465105188798852626]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[12279896640040761358,16819944754252654372]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[502125910674001101,4874613814734389117]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[6964077277237141888,7151316435171244180]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[5505266058476155326,9550778519957076375]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":17,"id":{"name":"num_traits","disambiguator":[2187919300340126041,15326872639173662768]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":18,"id":{"name":"approx","disambiguator":[14904918389831386736,10068560530058630953]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","num":19,"id":{"name":"static_assertions","disambiguator":[11292856544832691802,11800730731306792873]}}],"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":0,"byte_end":2915,"line_start":1,"line_end":86,"column_start":1,"column_end":24}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":40560,"byte_end":40561,"line_start":14,"line_end":14,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":125}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":189364,"byte_end":189365,"line_start":8,"line_end":8,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":192}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/quaternion.rs","byte_start":371464,"byte_end":371465,"line_start":5,"line_end":5,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":245}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transform.rs","byte_start":412905,"byte_end":412906,"line_start":13,"line_end":13,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":331}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/bezier.rs","byte_start":418210,"byte_end":418211,"line_start":5,"line_end":5,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":336}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":456812,"byte_end":456813,"line_start":7,"line_end":7,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Rect","parent":{"krate":0,"index":358}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2613,"byte_end":2614,"line_start":72,"line_end":72,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":0,"byte_end":2915,"line_start":1,"line_end":86,"column_start":1,"column_end":24},"name":"","qualname":"::","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":377}],"decl_id":null,"docs":" Generic 2D-3D math swiss army knife for game engines, with SIMD support and focus on convenience.","sig":null,"attributes":[{"value":"/ Generic 2D-3D math swiss army knife for game engines, with SIMD support and focus on convenience.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":0,"byte_end":101,"line_start":1,"line_end":1,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":102,"byte_end":105,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See [the wiki](https://github.com/yoanlcq/vek/wiki) for an overview, FAQ, guides, and other info.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":106,"byte_end":207,"line_start":3,"line_end":3,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":208,"byte_end":211,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Issues and bug reports are very welcome!","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":212,"byte_end":256,"line_start":5,"line_end":5,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":257,"byte_end":260,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":261,"byte_end":281,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":282,"byte_end":285,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ - `vec8`, `vec16`, `vec32`, `vec64`, `rgba`, `rgb`, `uvw`, `uv`","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":286,"byte_end":353,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/   Enable these types.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":354,"byte_end":379,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/   Other types are always enabled for the sake of doc-tests.  ","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":380,"byte_end":445,"line_start":11,"line_end":11,"column_start":1,"column_end":66}},{"value":"/ - `repr_simd` enables Nightly Rust's `repr_simd` and `simd_ffi` features, and unlock","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":446,"byte_end":534,"line_start":12,"line_end":12,"column_start":1,"column_end":89}},{"value":"/   SIMD versions of all appropriate types (though `repr_simd` modules).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":535,"byte_end":609,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/   On Stable, this feature has no effect.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":610,"byte_end":654,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ - `serde` makes vectors and matrices derive `Serialize` and `Deserialize`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":655,"byte_end":733,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ - `image` makes color vectors implement the `Pixel` trait from the `image` crate.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":734,"byte_end":819,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/ - `mint` enables conversion to the `mint` crate's types.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":820,"byte_end":880,"line_start":17,"line_end":17,"column_start":1,"column_end":61}},{"value":"/   `mint` is an interoperability layer for math libraries.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":881,"byte_end":942,"line_start":18,"line_end":18,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":943,"byte_end":946,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # `#![no_std]`","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":947,"byte_end":965,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/ This crate is `#![no_std]`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":966,"byte_end":997,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"no_std","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":999,"byte_end":1009,"line_start":23,"line_end":23,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":1237,"byte_end":1259,"line_start":30,"line_end":30,"column_start":1,"column_end":23}},{"value":"allow(stable_features)","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":1260,"byte_end":1286,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":1287,"byte_end":1320,"line_start":32,"line_end":32,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":9},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":8965},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":46},{"krate":0,"index":51},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":616},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":636},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":676},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":836},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":856},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":58},{"krate":0,"index":1280},{"krate":0,"index":1284},{"krate":0,"index":1289},{"krate":0,"index":1293},{"krate":0,"index":1298},{"krate":0,"index":1302},{"krate":0,"index":1306},{"krate":0,"index":1311},{"krate":0,"index":1316},{"krate":0,"index":1320},{"krate":0,"index":1324},{"krate":0,"index":1329},{"krate":0,"index":1334},{"krate":0,"index":1338},{"krate":0,"index":1342},{"krate":0,"index":1347},{"krate":0,"index":1352},{"krate":0,"index":1356},{"krate":0,"index":1360},{"krate":0,"index":1365},{"krate":0,"index":1370},{"krate":0,"index":1374},{"krate":0,"index":1378},{"krate":0,"index":1383},{"krate":0,"index":1388},{"krate":0,"index":1392},{"krate":0,"index":1396},{"krate":0,"index":1401},{"krate":0,"index":1406},{"krate":0,"index":1410},{"krate":0,"index":1414},{"krate":0,"index":1419},{"krate":0,"index":1424},{"krate":0,"index":1428},{"krate":0,"index":1432},{"krate":0,"index":1437},{"krate":0,"index":1442},{"krate":0,"index":1446},{"krate":0,"index":1450},{"krate":0,"index":1455},{"krate":0,"index":1460},{"krate":0,"index":1464},{"krate":0,"index":1468},{"krate":0,"index":1473},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":1478},{"krate":0,"index":1483},{"krate":0,"index":1488},{"krate":0,"index":1492},{"krate":0,"index":1496},{"krate":0,"index":1500},{"krate":0,"index":1504},{"krate":0,"index":1508},{"krate":0,"index":1512},{"krate":0,"index":1516},{"krate":0,"index":1520},{"krate":0,"index":1524},{"krate":0,"index":1528},{"krate":0,"index":1532},{"krate":0,"index":1536},{"krate":0,"index":1540},{"krate":0,"index":1544},{"krate":0,"index":1548},{"krate":0,"index":1552},{"krate":0,"index":1556},{"krate":0,"index":1560},{"krate":0,"index":1564},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122}],"decl_id":null,"docs":" Operations defined by this crate, such as `MulAdd`, `Lerp`, `Clamp`, and `Wrap`.\n","sig":null,"attributes":[{"value":"/ Operations defined by this crate, such as `MulAdd`, `Lerp`, `Clamp`, and `Wrap`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":2917,"byte_end":3001,"line_start":1,"line_end":1,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3393,"byte_end":3404,"line_start":13,"line_end":13,"column_start":8,"column_end":19},"name":"partial_min","qualname":"::ops::partial_min","value":"pub fn partial_min<T: PartialOrd + Sized>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the minimum of two values, using partial ordering.\n","sig":null,"attributes":[{"value":"/ Compares and returns the minimum of two values, using partial ordering.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3310,"byte_end":3385,"line_start":12,"line_end":12,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3563,"byte_end":3574,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"partial_max","qualname":"::ops::partial_max","value":"pub fn partial_max<T: PartialOrd + Sized>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the maximum of two values, using partial ordering.\n","sig":null,"attributes":[{"value":"/ Compares and returns the maximum of two values, using partial ordering.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3480,"byte_end":3555,"line_start":16,"line_end":16,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3740,"byte_end":3749,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"IsBetween","qualname":"::ops::IsBetween","value":"IsBetween<Bound = Self>: Sized","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"decl_id":null,"docs":" A value that can tell whether or not it is between two bounds (inclusive).\n","sig":null,"attributes":[{"value":"/ A value that can tell whether or not it is between two bounds (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3651,"byte_end":3729,"line_start":21,"line_end":21,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":24},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3842,"byte_end":3848,"line_start":24,"line_end":24,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::IsBetween::Output","value":"type Output;","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" `bool` for scalars, or vector of `bool`s for vectors.\n","sig":null,"attributes":[{"value":"/ `bool` for scalars, or vector of `bool`s for vectors.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3775,"byte_end":3832,"line_start":23,"line_end":23,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4447,"byte_end":4457,"line_start":42,"line_end":42,"column_start":8,"column_end":18},"name":"is_between","qualname":"::ops::IsBetween::is_between","value":"pub fn is_between(Self, Bound, Bound) -> Self::Output","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Returns whether this value is between `lower` and `upper` (inclusive).","sig":null,"attributes":[{"value":"/ Returns whether this value is between `lower` and `upper` (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3854,"byte_end":3928,"line_start":25,"line_end":25,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3933,"byte_end":3936,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ This would rather make use of inclusive ranges, but it's an unstable","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3941,"byte_end":4013,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/ feature.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4018,"byte_end":4030,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4035,"byte_end":4038,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4043,"byte_end":4055,"line_start":30,"line_end":30,"column_start":5,"column_end":17}},{"value":"/ Panics if `lower` is greater than `upper`. Swap the values yourself if necessary.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4060,"byte_end":4145,"line_start":31,"line_end":31,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4150,"byte_end":4153,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4158,"byte_end":4165,"line_start":33,"line_end":33,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::IsBetween;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4170,"byte_end":4198,"line_start":34,"line_end":34,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4203,"byte_end":4206,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ assert!(5_i32 .is_between(5, 10));","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4211,"byte_end":4249,"line_start":36,"line_end":36,"column_start":5,"column_end":43}},{"value":"/ assert!(7_i32 .is_between(5, 10));","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4254,"byte_end":4292,"line_start":37,"line_end":37,"column_start":5,"column_end":43}},{"value":"/ assert!(10_i32.is_between(5, 10));","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4297,"byte_end":4335,"line_start":38,"line_end":38,"column_start":5,"column_end":43}},{"value":"/ assert!(!(4_i32 .is_between(5, 10)));","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4340,"byte_end":4381,"line_start":39,"line_end":39,"column_start":5,"column_end":46}},{"value":"/ assert!(!(11_i32.is_between(5, 10)));","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4386,"byte_end":4427,"line_start":40,"line_end":40,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4432,"byte_end":4439,"line_start":41,"line_end":41,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4583,"byte_end":4595,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_between01","qualname":"::ops::IsBetween::is_between01","value":"pub fn is_between01(Self) -> Self::Output where Bound: Zero + One","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Returns whether this value is between 0 and 1 (inclusive).\n","sig":null,"attributes":[{"value":"/ Returns whether this value is between 0 and 1 (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4513,"byte_end":4575,"line_start":43,"line_end":43,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4792,"byte_end":4803,"line_start":50,"line_end":50,"column_start":11,"column_end":22},"name":"IsBetween01","qualname":"::ops::IsBetween01","value":"IsBetween01: IsBetween + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" A value that can tell whether or not it is between 0 and 1 (inclusive).\n","sig":null,"attributes":[{"value":"/ A value that can tell whether or not it is between 0 and 1 (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4706,"byte_end":4781,"line_start":49,"line_end":49,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4981,"byte_end":4986,"line_start":55,"line_end":55,"column_start":11,"column_end":16},"name":"Clamp","qualname":"::ops::Clamp","value":"Clamp<Bound = Self>: Sized","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" A scalar or vector that can be constrained to be between two values (inclusive).\n","sig":null,"attributes":[{"value":"/ A scalar or vector that can be constrained to be between two values (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4886,"byte_end":4970,"line_start":54,"line_end":54,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5587,"byte_end":5594,"line_start":73,"line_end":73,"column_start":8,"column_end":15},"name":"clamped","qualname":"::ops::Clamp::clamped","value":"pub fn clamped(Self, Bound, Bound) -> Self","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Constrains this value to be between `lower` and `upper` (inclusive).","sig":null,"attributes":[{"value":"/ Constrains this value to be between `lower` and `upper` (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5012,"byte_end":5084,"line_start":56,"line_end":56,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5089,"byte_end":5092,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This would rather make use of inclusive ranges, but it's an unstable","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5097,"byte_end":5169,"line_start":58,"line_end":58,"column_start":5,"column_end":77}},{"value":"/ feature.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5174,"byte_end":5186,"line_start":59,"line_end":59,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5191,"byte_end":5194,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5199,"byte_end":5211,"line_start":61,"line_end":61,"column_start":5,"column_end":17}},{"value":"/ Panics if `lower` is greater than `upper`. Swap the values yourself if necessary.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5216,"byte_end":5301,"line_start":62,"line_end":62,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5306,"byte_end":5309,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5314,"byte_end":5321,"line_start":64,"line_end":64,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Clamp;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5326,"byte_end":5350,"line_start":65,"line_end":65,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5355,"byte_end":5358,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(7.clamped(5, 10), 7);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5363,"byte_end":5399,"line_start":67,"line_end":67,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(4.clamped(5, 10), 5);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5404,"byte_end":5440,"line_start":68,"line_end":68,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(5.clamped(5, 10), 5);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5445,"byte_end":5481,"line_start":69,"line_end":69,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(10.clamped(5, 10), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5486,"byte_end":5524,"line_start":70,"line_end":70,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(11.clamped(5, 10), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5529,"byte_end":5567,"line_start":71,"line_end":71,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5572,"byte_end":5579,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5816,"byte_end":5821,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"clamp","qualname":"::ops::Clamp::clamp","value":"pub fn clamp(Self, Bound, Bound) -> Self","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Alias to `clamped`, which doesn't take `self`.","sig":null,"attributes":[{"value":"/ Alias to `clamped`, which doesn't take `self`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5643,"byte_end":5693,"line_start":75,"line_end":75,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5698,"byte_end":5701,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5706,"byte_end":5718,"line_start":77,"line_end":77,"column_start":5,"column_end":17}},{"value":"/ Panics if `lower` is greater than `upper`. Swap the values yourself if necessary.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5723,"byte_end":5808,"line_start":78,"line_end":78,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5983,"byte_end":5992,"line_start":83,"line_end":83,"column_start":8,"column_end":17},"name":"clamped01","qualname":"::ops::Clamp::clamped01","value":"pub fn clamped01(Self) -> Self where Bound: Zero + One","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Constrains this value to be between 0 and 1 (inclusive).\n","sig":null,"attributes":[{"value":"/ Constrains this value to be between 0 and 1 (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5915,"byte_end":5975,"line_start":82,"line_end":82,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6153,"byte_end":6160,"line_start":87,"line_end":87,"column_start":8,"column_end":15},"name":"clamp01","qualname":"::ops::Clamp::clamp01","value":"pub fn clamp01(Self) -> Self where Bound: Zero + One","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Alias to `clamped01`, which doesn't take `self`.\n","sig":null,"attributes":[{"value":"/ Alias to `clamped01`, which doesn't take `self`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6093,"byte_end":6145,"line_start":86,"line_end":86,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6339,"byte_end":6355,"line_start":91,"line_end":91,"column_start":8,"column_end":24},"name":"clamped_minus1_1","qualname":"::ops::Clamp::clamped_minus1_1","value":"pub fn clamped_minus1_1(Self) -> Self where Bound: One + Neg<Output = Bound>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Constrains this value to be between -1 and 1 (inclusive).\n","sig":null,"attributes":[{"value":"/ Constrains this value to be between -1 and 1 (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6270,"byte_end":6331,"line_start":90,"line_end":90,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6536,"byte_end":6550,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"clamp_minus1_1","qualname":"::ops::Clamp::clamp_minus1_1","value":"pub fn clamp_minus1_1(Self) -> Self where Bound: One + Neg<Output = Bound>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Alias to `clamped_minus1_1`, which doesn't take `self`.\n","sig":null,"attributes":[{"value":"/ Alias to `clamped_minus1_1`, which doesn't take `self`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6469,"byte_end":6528,"line_start":94,"line_end":94,"column_start":5,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":38},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6764,"byte_end":6771,"line_start":101,"line_end":101,"column_start":11,"column_end":18},"name":"Clamp01","qualname":"::ops::Clamp01","value":"Clamp01: Clamp + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" A scalar or vector that can be constrained to be between 0 and 1 (inclusive).\n","sig":null,"attributes":[{"value":"/ A scalar or vector that can be constrained to be between 0 and 1 (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6672,"byte_end":6753,"line_start":100,"line_end":100,"column_start":1,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6934,"byte_end":6945,"line_start":105,"line_end":105,"column_start":11,"column_end":22},"name":"ClampMinus1","qualname":"::ops::ClampMinus1","value":"ClampMinus1: Clamp + One + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" A scalar or vector that can be constrained to be between -1 and 1 (inclusive).\n","sig":null,"attributes":[{"value":"/ A scalar or vector that can be constrained to be between -1 and 1 (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6841,"byte_end":6923,"line_start":104,"line_end":104,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8569,"byte_end":8575,"line_start":168,"line_end":168,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::MulAdd","value":"MulAdd<MulRhs = Self, AddRhs = Self>","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" The fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ The fused multiply-add operation.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8521,"byte_end":8558,"line_start":167,"line_end":167,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8747,"byte_end":8753,"line_start":170,"line_end":170,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ The resulting type after applying the fused multiply-add operation.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8666,"byte_end":8737,"line_start":169,"line_end":169,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8855,"byte_end":8862,"line_start":172,"line_end":172,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::MulAdd::mul_add","value":"pub fn mul_add(Self, MulRhs, AddRhs) -> Self::Output","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Returns `(self * mul) + add` as a possibly faster and more precise single operation.\n","sig":null,"attributes":[{"value":"/ Returns `(self * mul) + add` as a possibly faster and more precise single operation.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8759,"byte_end":8847,"line_start":171,"line_end":171,"column_start":5,"column_end":93}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8955,"byte_end":8962,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add","value":"pub fn mul_add<Output, V, M, A>(V, M, A) -> Output where V: MulAdd<M, A,\nOutput = Output>","parent":null,"children":[],"decl_id":null,"docs":" Returns `(val * mul) + add`.\n","sig":null,"attributes":[{"value":"/ Returns `(val * mul) + add`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":8915,"byte_end":8947,"line_start":175,"line_end":175,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12623,"byte_end":12627,"line_start":273,"line_end":273,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::ops::Lerp","value":"Lerp<Factor = f32>: Sized","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"decl_id":null,"docs":" A value that can be linearly interpolated.","sig":null,"attributes":[{"value":"/ A value that can be linearly interpolated.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":10891,"byte_end":10937,"line_start":226,"line_end":226,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":10938,"byte_end":10941,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ Note that, like standard operators, this can be implement for `T` and `&T`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":10942,"byte_end":11021,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/ You would make the difference like so:","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11022,"byte_end":11064,"line_start":229,"line_end":229,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11065,"byte_end":11068,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11069,"byte_end":11076,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"/ use vek::ops::Lerp;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11077,"byte_end":11100,"line_start":232,"line_end":232,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11101,"byte_end":11104,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ let a = Lerp::lerp(0, 10, 0.5_f32);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11105,"byte_end":11144,"line_start":234,"line_end":234,"column_start":1,"column_end":40}},{"value":"/ let b = Lerp::lerp(&0, &10, 0.5_f32);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11145,"byte_end":11186,"line_start":235,"line_end":235,"column_start":1,"column_end":42}},{"value":"/ let c = i32::lerp(0, 10, 0.5_f32);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11187,"byte_end":11225,"line_start":236,"line_end":236,"column_start":1,"column_end":39}},{"value":"/ let d = <&i32>::lerp(&0, &10, 0.5_f32);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11226,"byte_end":11269,"line_start":237,"line_end":237,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11270,"byte_end":11291,"line_start":238,"line_end":238,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(a, c);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11292,"byte_end":11313,"line_start":239,"line_end":239,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(a, d);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11314,"byte_end":11335,"line_start":240,"line_end":240,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11336,"byte_end":11343,"line_start":241,"line_end":241,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11344,"byte_end":11347,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ This is made possible thanks to the explicit `Output` type.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11348,"byte_end":11411,"line_start":243,"line_end":243,"column_start":1,"column_end":64}},{"value":"/ Therefore, it's also convenient for `GameState` structures, which you might","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11412,"byte_end":11491,"line_start":244,"line_end":244,"column_start":1,"column_end":80}},{"value":"/ prefer to interpolate by reference instead of consuming them.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11492,"byte_end":11557,"line_start":245,"line_end":245,"column_start":1,"column_end":66}},{"value":"/ The interpolation of two `&GameState`s would produce a new `GameState` value.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11558,"byte_end":11639,"line_start":246,"line_end":246,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11640,"byte_end":11643,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11644,"byte_end":11651,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ use vek::{Lerp, Vec3};","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11652,"byte_end":11678,"line_start":249,"line_end":249,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11679,"byte_end":11682,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ /// A data-heavy structure that represents a current game state.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11683,"byte_end":11751,"line_start":251,"line_end":251,"column_start":1,"column_end":69}},{"value":"/ /// It's neither Copy and nor even Clone!","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11752,"byte_end":11797,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/ struct GameState {","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11798,"byte_end":11820,"line_start":253,"line_end":253,"column_start":1,"column_end":23}},{"value":"/     pub camera_position: Vec3<f32>,","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11821,"byte_end":11860,"line_start":254,"line_end":254,"column_start":1,"column_end":40}},{"value":"/     // ... obviously a lot of other members following ...","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11861,"byte_end":11922,"line_start":255,"line_end":255,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11923,"byte_end":11928,"line_start":256,"line_end":256,"column_start":1,"column_end":6}},{"value":"/ // We can select the Progress type. I chose f64; the default is f32.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":11929,"byte_end":12001,"line_start":257,"line_end":257,"column_start":1,"column_end":73}},{"value":"/ impl<'a> Lerp<f64> for &'a GameState {","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12002,"byte_end":12044,"line_start":258,"line_end":258,"column_start":1,"column_end":43}},{"value":"/     type Output = GameState;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12045,"byte_end":12077,"line_start":259,"line_end":259,"column_start":1,"column_end":33}},{"value":"/     fn lerp_unclamped(a: Self, b: Self, t: f64) -> GameState {","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12078,"byte_end":12144,"line_start":260,"line_end":260,"column_start":1,"column_end":67}},{"value":"/         GameState {","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12145,"byte_end":12168,"line_start":261,"line_end":261,"column_start":1,"column_end":24}},{"value":"/             camera_position: Lerp::lerp(a.camera_position, b.camera_position, t as f32),","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12169,"byte_end":12261,"line_start":262,"line_end":262,"column_start":1,"column_end":93}},{"value":"/             // ... etc for all relevant members...","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12262,"byte_end":12316,"line_start":263,"line_end":263,"column_start":1,"column_end":55}},{"value":"/         }","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12317,"byte_end":12330,"line_start":264,"line_end":264,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12331,"byte_end":12340,"line_start":265,"line_end":265,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12341,"byte_end":12346,"line_start":266,"line_end":266,"column_start":1,"column_end":6}},{"value":"/ let a = GameState { camera_position: Vec3::zero() };","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12347,"byte_end":12403,"line_start":267,"line_end":267,"column_start":1,"column_end":57}},{"value":"/ let b = GameState { camera_position: Vec3::unit_x() };","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12404,"byte_end":12462,"line_start":268,"line_end":268,"column_start":1,"column_end":59}},{"value":"/ let c = Lerp::lerp(&a, &b, 0.5);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12463,"byte_end":12499,"line_start":269,"line_end":269,"column_start":1,"column_end":37}},{"value":"/ // Hurray! We've got an interpolated state without consuming the two previous ones.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12500,"byte_end":12587,"line_start":270,"line_end":270,"column_start":1,"column_end":88}},{"value":"/ # let _ = c;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12588,"byte_end":12604,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12605,"byte_end":12612,"line_start":272,"line_end":272,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":60},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12722,"byte_end":12728,"line_start":276,"line_end":276,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::Lerp::Output","value":"type Output;","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" The resulting type after performing the LERP operation.\n","sig":null,"attributes":[{"value":"/ The resulting type after performing the LERP operation.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12653,"byte_end":12712,"line_start":275,"line_end":275,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13557,"byte_end":13571,"line_start":295,"line_end":295,"column_start":8,"column_end":22},"name":"lerp_unclamped","qualname":"::ops::Lerp::lerp_unclamped","value":"pub fn lerp_unclamped(Self, Self, Factor) -> Self::Output","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Returns the linear interpolation of `from` to `to` with `factor` unconstrained,\n using the supposedly fastest but less precise implementation.","sig":null,"attributes":[{"value":"/ Returns the linear interpolation of `from` to `to` with `factor` unconstrained,","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12734,"byte_end":12817,"line_start":277,"line_end":277,"column_start":5,"column_end":88}},{"value":"/ using the supposedly fastest but less precise implementation.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12822,"byte_end":12887,"line_start":278,"line_end":278,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12892,"byte_end":12895,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This would make use of inclusive ranges, but they aren't stable yet.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12900,"byte_end":12972,"line_start":280,"line_end":280,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12977,"byte_end":12980,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ A possible implementation is `from + factor * (to - from)`, a.k.a","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12985,"byte_end":13054,"line_start":282,"line_end":282,"column_start":5,"column_end":74}},{"value":"/ `factor.mul_add(to - from, from)`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13059,"byte_end":13097,"line_start":283,"line_end":283,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13102,"byte_end":13105,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13110,"byte_end":13117,"line_start":285,"line_end":285,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Lerp;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13122,"byte_end":13145,"line_start":286,"line_end":286,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13150,"byte_end":13153,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Lerp::lerp_unclamped(10, 20, -1.0_f32),  0);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13158,"byte_end":13217,"line_start":288,"line_end":288,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Lerp::lerp_unclamped(10, 20, -0.5_f32),  5);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13222,"byte_end":13281,"line_start":289,"line_end":289,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Lerp::lerp_unclamped(10, 20,  0.0_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13286,"byte_end":13345,"line_start":290,"line_end":290,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Lerp::lerp_unclamped(10, 20,  0.5_f32), 15);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13350,"byte_end":13409,"line_start":291,"line_end":291,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Lerp::lerp_unclamped(10, 20,  1.0_f32), 20);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13414,"byte_end":13473,"line_start":292,"line_end":292,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Lerp::lerp_unclamped(10, 20,  1.5_f32), 25);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13478,"byte_end":13537,"line_start":293,"line_end":293,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13542,"byte_end":13549,"line_start":294,"line_end":294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14495,"byte_end":14517,"line_start":315,"line_end":315,"column_start":8,"column_end":30},"name":"lerp_unclamped_precise","qualname":"::ops::Lerp::lerp_unclamped_precise","value":"pub fn lerp_unclamped_precise(Self, Self, Factor) -> Self::Output","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Returns the linear interpolation of `from` to `to` with `factor` unconstrained,\n using a possibly slower but more precise operation.","sig":null,"attributes":[{"value":"/ Returns the linear interpolation of `from` to `to` with `factor` unconstrained,","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13632,"byte_end":13715,"line_start":297,"line_end":297,"column_start":5,"column_end":88}},{"value":"/ using a possibly slower but more precise operation.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13720,"byte_end":13775,"line_start":298,"line_end":298,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13780,"byte_end":13783,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This would make use of inclusive ranges, but they aren't stable yet.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13788,"byte_end":13860,"line_start":300,"line_end":300,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13865,"byte_end":13868,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ A possible implementation is `from*(1-factor) + to*factor`, a.k.a","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13873,"byte_end":13942,"line_start":302,"line_end":302,"column_start":5,"column_end":74}},{"value":"/ `from.mul_add(1-factor, to*factor)`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13947,"byte_end":13987,"line_start":303,"line_end":303,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":13992,"byte_end":13995,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14000,"byte_end":14007,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Lerp;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14012,"byte_end":14035,"line_start":306,"line_end":306,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14040,"byte_end":14043,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Lerp::lerp_unclamped_precise(10, 20, -1.0_f32),  0);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14048,"byte_end":14115,"line_start":308,"line_end":308,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Lerp::lerp_unclamped_precise(10, 20, -0.5_f32),  5);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14120,"byte_end":14187,"line_start":309,"line_end":309,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Lerp::lerp_unclamped_precise(10, 20,  0.0_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14192,"byte_end":14259,"line_start":310,"line_end":310,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Lerp::lerp_unclamped_precise(10, 20,  0.5_f32), 15);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14264,"byte_end":14331,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Lerp::lerp_unclamped_precise(10, 20,  1.0_f32), 20);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14336,"byte_end":14403,"line_start":312,"line_end":312,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Lerp::lerp_unclamped_precise(10, 20,  1.5_f32), 25);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14408,"byte_end":14475,"line_start":313,"line_end":313,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14480,"byte_end":14487,"line_start":314,"line_end":314,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15130,"byte_end":15134,"line_start":332,"line_end":332,"column_start":8,"column_end":12},"name":"lerp","qualname":"::ops::Lerp::lerp","value":"pub fn lerp(Self, Self, Factor) -> Self::Output where Factor: Clamp + Zero +\nOne","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Alias to `lerp_unclamped` which constrains `factor` to be between 0 and 1\n (inclusive).","sig":null,"attributes":[{"value":"/ Alias to `lerp_unclamped` which constrains `factor` to be between 0 and 1","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14632,"byte_end":14709,"line_start":319,"line_end":319,"column_start":5,"column_end":82}},{"value":"/ (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14714,"byte_end":14730,"line_start":320,"line_end":320,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14735,"byte_end":14738,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14743,"byte_end":14750,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Lerp;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14755,"byte_end":14778,"line_start":323,"line_end":323,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14783,"byte_end":14786,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Lerp::lerp(10, 20, -1.0_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14791,"byte_end":14840,"line_start":325,"line_end":325,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Lerp::lerp(10, 20, -0.5_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14845,"byte_end":14894,"line_start":326,"line_end":326,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Lerp::lerp(10, 20,  0.0_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14899,"byte_end":14948,"line_start":327,"line_end":327,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Lerp::lerp(10, 20,  0.5_f32), 15);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":14953,"byte_end":15002,"line_start":328,"line_end":328,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Lerp::lerp(10, 20,  1.0_f32), 20);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15007,"byte_end":15056,"line_start":329,"line_end":329,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Lerp::lerp(10, 20,  1.5_f32), 20);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15061,"byte_end":15110,"line_start":330,"line_end":330,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15115,"byte_end":15122,"line_start":331,"line_end":331,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15852,"byte_end":15864,"line_start":350,"line_end":350,"column_start":8,"column_end":20},"name":"lerp_precise","qualname":"::ops::Lerp::lerp_precise","value":"pub fn lerp_precise(Self, Self, Factor) -> Self::Output where Factor: Clamp +\nZero + One","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Alias to `lerp_unclamped_precise` which constrains `factor` to be between 0 and 1\n (inclusive).","sig":null,"attributes":[{"value":"/ Alias to `lerp_unclamped_precise` which constrains `factor` to be between 0 and 1","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15298,"byte_end":15383,"line_start":337,"line_end":337,"column_start":5,"column_end":90}},{"value":"/ (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15388,"byte_end":15404,"line_start":338,"line_end":338,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15409,"byte_end":15412,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15417,"byte_end":15424,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Lerp;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15429,"byte_end":15452,"line_start":341,"line_end":341,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15457,"byte_end":15460,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Lerp::lerp_precise(10, 20, -1.0_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15465,"byte_end":15522,"line_start":343,"line_end":343,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Lerp::lerp_precise(10, 20, -0.5_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15527,"byte_end":15584,"line_start":344,"line_end":344,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Lerp::lerp_precise(10, 20,  0.0_f32), 10);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15589,"byte_end":15646,"line_start":345,"line_end":345,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Lerp::lerp_precise(10, 20,  0.5_f32), 15);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15651,"byte_end":15708,"line_start":346,"line_end":346,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Lerp::lerp_precise(10, 20,  1.0_f32), 20);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15713,"byte_end":15770,"line_start":347,"line_end":347,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Lerp::lerp_precise(10, 20,  1.5_f32), 20);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15775,"byte_end":15832,"line_start":348,"line_end":348,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":15837,"byte_end":15844,"line_start":349,"line_end":349,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":67},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19346,"byte_end":19351,"line_start":443,"line_end":443,"column_start":11,"column_end":16},"name":"Slerp","qualname":"::ops::Slerp","value":"Slerp<Factor = f32>: Sized","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" A value that can be Spherically Linearly interpolated.","sig":null,"attributes":[{"value":"/ A value that can be Spherically Linearly interpolated.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19177,"byte_end":19235,"line_start":440,"line_end":440,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19236,"byte_end":19239,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ The `Output` type allows this trait to be meaningfully implemented for `&T` as well as `T`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19240,"byte_end":19335,"line_start":442,"line_end":442,"column_start":1,"column_end":96}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19447,"byte_end":19453,"line_start":445,"line_end":445,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::Slerp::Output","value":"type Output;","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" The resulting type after performing the SLERP operation.\n","sig":null,"attributes":[{"value":"/ The resulting type after performing the SLERP operation.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19377,"byte_end":19437,"line_start":444,"line_end":444,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19581,"byte_end":19596,"line_start":448,"line_end":448,"column_start":8,"column_end":23},"name":"slerp_unclamped","qualname":"::ops::Slerp::slerp_unclamped","value":"pub fn slerp_unclamped(Self, Self, Factor) -> Self::Output","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Performs spherical linear interpolation without implictly constraining `factor` to\n be between 0 and 1.\n","sig":null,"attributes":[{"value":"/ Performs spherical linear interpolation without implictly constraining `factor` to","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19459,"byte_end":19545,"line_start":446,"line_end":446,"column_start":5,"column_end":91}},{"value":"/ be between 0 and 1.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19550,"byte_end":19573,"line_start":447,"line_end":447,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19761,"byte_end":19766,"line_start":451,"line_end":451,"column_start":8,"column_end":13},"name":"slerp","qualname":"::ops::Slerp::slerp","value":"pub fn slerp(Self, Self, Factor) -> Self::Output where Factor: Clamp + Zero +\nOne","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Performs spherical linear interpolation, constraining `factor` to\n be between 0 and 1.\n","sig":null,"attributes":[{"value":"/ Performs spherical linear interpolation, constraining `factor` to","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19656,"byte_end":19725,"line_start":449,"line_end":449,"column_start":5,"column_end":74}},{"value":"/ be between 0 and 1.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19730,"byte_end":19753,"line_start":450,"line_end":450,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19989,"byte_end":19993,"line_start":457,"line_end":457,"column_start":11,"column_end":15},"name":"Wrap","qualname":"::ops::Wrap","value":"Wrap<Bound = Self>: Sized","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" A value that can wrap itself around given bounds.\n","sig":null,"attributes":[{"value":"/ A value that can wrap itself around given bounds.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19925,"byte_end":19978,"line_start":456,"line_end":456,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21481,"byte_end":21488,"line_start":492,"line_end":492,"column_start":8,"column_end":15},"name":"wrapped","qualname":"::ops::Wrap::wrapped","value":"pub fn wrapped(Self, Bound) -> Self","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Returns this value, wrapped between zero and some `upper` bound (both inclusive).","sig":null,"attributes":[{"value":"/ Returns this value, wrapped between zero and some `upper` bound (both inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20019,"byte_end":20104,"line_start":458,"line_end":458,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20109,"byte_end":20112,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ The computation is `self - (self/upper).floor() * upper`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20117,"byte_end":20178,"line_start":460,"line_end":460,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20183,"byte_end":20186,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ This might look like the remainder (`%`) operator, but behaves differently with negative","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20191,"byte_end":20283,"line_start":462,"line_end":462,"column_start":5,"column_end":97}},{"value":"/ values.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20288,"byte_end":20299,"line_start":463,"line_end":463,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20304,"byte_end":20307,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ If you're familiar with Unity, this is the `Mathf.Repeat()` function.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20312,"byte_end":20385,"line_start":465,"line_end":465,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20390,"byte_end":20393,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20398,"byte_end":20410,"line_start":467,"line_end":467,"column_start":5,"column_end":17}},{"value":"/ Panics if `upper <= 0`. Reasons include :","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20415,"byte_end":20460,"line_start":468,"line_end":468,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20465,"byte_end":20468,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ - Some types may implement it as `self.wrapped_between(zero, upper)`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20473,"byte_end":20546,"line_start":470,"line_end":470,"column_start":5,"column_end":78}},{"value":"/   A negative `upper` would violate the `lower <= upper` requirement in this case;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20551,"byte_end":20636,"line_start":471,"line_end":471,"column_start":5,"column_end":90}},{"value":"/ - On unsigned integers, this just resolves to `self % upper`,","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20641,"byte_end":20706,"line_start":472,"line_end":472,"column_start":5,"column_end":70}},{"value":"/   and integer division by zero is forbidden. Testing for `i==0` incurs unnecessary overhead.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20711,"byte_end":20807,"line_start":473,"line_end":473,"column_start":5,"column_end":101}},{"value":"/ - Handling negative `upper` values would double the number of test cases","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20812,"byte_end":20888,"line_start":474,"line_end":474,"column_start":5,"column_end":81}},{"value":"/   and increases implementation complexity;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20893,"byte_end":20939,"line_start":475,"line_end":475,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20944,"byte_end":20947,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20952,"byte_end":20959,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Wrap;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20964,"byte_end":20987,"line_start":478,"line_end":478,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20992,"byte_end":20995,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((-5_i32).wrapped(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21000,"byte_end":21039,"line_start":480,"line_end":480,"column_start":5,"column_end":44}},{"value":"/ assert_eq!((-4_i32).wrapped(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21044,"byte_end":21083,"line_start":481,"line_end":481,"column_start":5,"column_end":44}},{"value":"/ assert_eq!((-3_i32).wrapped(3), 0);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21088,"byte_end":21127,"line_start":482,"line_end":482,"column_start":5,"column_end":44}},{"value":"/ assert_eq!((-2_i32).wrapped(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21132,"byte_end":21171,"line_start":483,"line_end":483,"column_start":5,"column_end":44}},{"value":"/ assert_eq!((-1_i32).wrapped(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21176,"byte_end":21215,"line_start":484,"line_end":484,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(0_i32.wrapped(3), 0);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21220,"byte_end":21256,"line_start":485,"line_end":485,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(1_i32.wrapped(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21261,"byte_end":21297,"line_start":486,"line_end":486,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(2_i32.wrapped(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21302,"byte_end":21338,"line_start":487,"line_end":487,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(3_i32.wrapped(3), 0);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21343,"byte_end":21379,"line_start":488,"line_end":488,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(4_i32.wrapped(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21384,"byte_end":21420,"line_start":489,"line_end":489,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(5_i32.wrapped(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21425,"byte_end":21461,"line_start":490,"line_end":490,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21466,"byte_end":21473,"line_start":491,"line_end":491,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21671,"byte_end":21675,"line_start":497,"line_end":497,"column_start":8,"column_end":12},"name":"wrap","qualname":"::ops::Wrap::wrap","value":"pub fn wrap(Self, Bound) -> Self","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Alias to `wrapped()` which doesn't take `self`.","sig":null,"attributes":[{"value":"/ Alias to `wrapped()` which doesn't take `self`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21522,"byte_end":21573,"line_start":493,"line_end":493,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21578,"byte_end":21581,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21586,"byte_end":21598,"line_start":495,"line_end":495,"column_start":5,"column_end":17}},{"value":"/ Panics if `upper <= 0`. See `wrapped()` for a rationale.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21603,"byte_end":21663,"line_start":496,"line_end":496,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21982,"byte_end":21993,"line_start":504,"line_end":504,"column_start":8,"column_end":19},"name":"wrapped_2pi","qualname":"::ops::Wrap::wrapped_2pi","value":"pub fn wrapped_2pi(Self) -> Self where Bound: FloatConst + Add<Output = Bound>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Returns this value, wrapped between zero and two times 𝛑 (inclusive).","sig":null,"attributes":[{"value":"/ Returns this value, wrapped between zero and two times 𝛑 (inclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21748,"byte_end":21824,"line_start":500,"line_end":500,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21829,"byte_end":21832,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ This ought to be named `wrapped_tau`, but I assume people are","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21837,"byte_end":21902,"line_start":502,"line_end":502,"column_start":5,"column_end":70}},{"value":"/ more familiar with 𝛑, and `2pi` is therefore more evocative.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":21907,"byte_end":21974,"line_start":503,"line_end":503,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22320,"byte_end":22328,"line_start":511,"line_end":511,"column_start":8,"column_end":16},"name":"wrap_2pi","qualname":"::ops::Wrap::wrap_2pi","value":"pub fn wrap_2pi(Self) -> Self where Bound: FloatConst + Add<Output = Bound>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Alias to `wrapped_2pi` which doesn't take `self`.","sig":null,"attributes":[{"value":"/ Alias to `wrapped_2pi` which doesn't take `self`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22112,"byte_end":22165,"line_start":507,"line_end":507,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22170,"byte_end":22173,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ This ought to be named `wrap_tau`, but I assume people are","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22178,"byte_end":22240,"line_start":509,"line_end":509,"column_start":5,"column_end":67}},{"value":"/ more familiar with 𝛑, and `2pi` is therefore more evocative.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22245,"byte_end":22312,"line_start":510,"line_end":510,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23489,"byte_end":23504,"line_start":538,"line_end":538,"column_start":8,"column_end":23},"name":"wrapped_between","qualname":"::ops::Wrap::wrapped_between","value":"pub fn wrapped_between(Self, Bound, Bound) -> Self","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Returns this value, wrapped between `lower` (inclusive) and `upper` (exclusive).","sig":null,"attributes":[{"value":"/ Returns this value, wrapped between `lower` (inclusive) and `upper` (exclusive).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22431,"byte_end":22515,"line_start":515,"line_end":515,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22520,"byte_end":22523,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22528,"byte_end":22540,"line_start":517,"line_end":517,"column_start":5,"column_end":17}},{"value":"/ Panics if `lower >= upper`. Swap the values yourself if necessary.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22545,"byte_end":22615,"line_start":518,"line_end":518,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22620,"byte_end":22623,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ Also panics if `lower < 0` or `upper <= 0`. See `wrapped()` for a rationale.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22628,"byte_end":22708,"line_start":520,"line_end":520,"column_start":5,"column_end":85}},{"value":"/ Forcing `lower` and `upper` to be positive allows implementations to be simpler and faster.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22713,"byte_end":22808,"line_start":521,"line_end":521,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22813,"byte_end":22816,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22821,"byte_end":22828,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Wrap;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22833,"byte_end":22856,"line_start":524,"line_end":524,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22861,"byte_end":22864,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((-4_i32).wrapped_between(2, 5), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22869,"byte_end":22919,"line_start":526,"line_end":526,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((-3_i32).wrapped_between(2, 5), 3);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22924,"byte_end":22974,"line_start":527,"line_end":527,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((-2_i32).wrapped_between(2, 5), 4);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":22979,"byte_end":23029,"line_start":528,"line_end":528,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((-1_i32).wrapped_between(2, 5), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23034,"byte_end":23084,"line_start":529,"line_end":529,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(  0_i32 .wrapped_between(2, 5), 3);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23089,"byte_end":23139,"line_start":530,"line_end":530,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(  1_i32 .wrapped_between(2, 5), 4);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23144,"byte_end":23194,"line_start":531,"line_end":531,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(  2_i32 .wrapped_between(2, 5), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23199,"byte_end":23249,"line_start":532,"line_end":532,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(  3_i32 .wrapped_between(2, 5), 3);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23254,"byte_end":23304,"line_start":533,"line_end":533,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(  4_i32 .wrapped_between(2, 5), 4);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23309,"byte_end":23359,"line_start":534,"line_end":534,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(  5_i32 .wrapped_between(2, 5), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23364,"byte_end":23414,"line_start":535,"line_end":535,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(  6_i32 .wrapped_between(2, 5), 3);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23419,"byte_end":23469,"line_start":536,"line_end":536,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23474,"byte_end":23481,"line_start":537,"line_end":537,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23732,"byte_end":23744,"line_start":543,"line_end":543,"column_start":8,"column_end":20},"name":"wrap_between","qualname":"::ops::Wrap::wrap_between","value":"pub fn wrap_between(Self, Bound, Bound) -> Self where Self: Sub<Output =\nSelf> + Add<Output = Self> + From<Bound>, Bound: Copy + Sub<Output = Bound> +\nPartialOrd","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Alias to `wrapped_between` which doesn't take `self`.","sig":null,"attributes":[{"value":"/ Alias to `wrapped_between` which doesn't take `self`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23552,"byte_end":23609,"line_start":539,"line_end":539,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23614,"byte_end":23617,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23622,"byte_end":23634,"line_start":541,"line_end":541,"column_start":5,"column_end":17}},{"value":"/ Panics if `lower` is greater than `upper`. Swap the values yourself if necessary.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23639,"byte_end":23724,"line_start":542,"line_end":542,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24786,"byte_end":24794,"line_start":570,"line_end":570,"column_start":8,"column_end":16},"name":"pingpong","qualname":"::ops::Wrap::pingpong","value":"pub fn pingpong(Self, Bound) -> Self","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Wraps a value such that it goes back and forth from zero to `upper` (inclusive) as it increases.","sig":null,"attributes":[{"value":"/ Wraps a value such that it goes back and forth from zero to `upper` (inclusive) as it increases.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":23980,"byte_end":24080,"line_start":549,"line_end":549,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24085,"byte_end":24088,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24093,"byte_end":24105,"line_start":551,"line_end":551,"column_start":5,"column_end":17}},{"value":"/ Panics if `upper <= 0`. See `wrapped()` for a rationale.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24110,"byte_end":24170,"line_start":552,"line_end":552,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24175,"byte_end":24178,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24183,"byte_end":24190,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"/ use vek::ops::Wrap;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24195,"byte_end":24218,"line_start":555,"line_end":555,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24223,"byte_end":24226,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((-4_i32).pingpong(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24231,"byte_end":24271,"line_start":557,"line_end":557,"column_start":5,"column_end":45}},{"value":"/ assert_eq!((-3_i32).pingpong(3), 3);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24276,"byte_end":24316,"line_start":558,"line_end":558,"column_start":5,"column_end":45}},{"value":"/ assert_eq!((-2_i32).pingpong(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24321,"byte_end":24361,"line_start":559,"line_end":559,"column_start":5,"column_end":45}},{"value":"/ assert_eq!((-1_i32).pingpong(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24366,"byte_end":24406,"line_start":560,"line_end":560,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  0_i32 .pingpong(3), 0);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24411,"byte_end":24451,"line_start":561,"line_end":561,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  1_i32 .pingpong(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24456,"byte_end":24496,"line_start":562,"line_end":562,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  2_i32 .pingpong(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24501,"byte_end":24541,"line_start":563,"line_end":563,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  3_i32 .pingpong(3), 3);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24546,"byte_end":24586,"line_start":564,"line_end":564,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  4_i32 .pingpong(3), 2);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24591,"byte_end":24631,"line_start":565,"line_end":565,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  5_i32 .pingpong(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24636,"byte_end":24676,"line_start":566,"line_end":566,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  6_i32 .pingpong(3), 0);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24681,"byte_end":24721,"line_start":567,"line_end":567,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(  7_i32 .pingpong(3), 1);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24726,"byte_end":24766,"line_start":568,"line_end":568,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24771,"byte_end":24778,"line_start":569,"line_end":569,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24913,"byte_end":24924,"line_start":573,"line_end":573,"column_start":8,"column_end":19},"name":"delta_angle","qualname":"::ops::Wrap::delta_angle","value":"pub fn delta_angle(Self, Self) -> Self where Self: From<Bound> + Sub<Output =\nSelf> + PartialOrd, Bound: FloatConst + Add<Output = Bound>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Calculates the shortest difference between two given angles, in radians.\n","sig":null,"attributes":[{"value":"/ Calculates the shortest difference between two given angles, in radians.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":24829,"byte_end":24905,"line_start":572,"line_end":572,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":25455,"byte_end":25474,"line_start":586,"line_end":586,"column_start":8,"column_end":27},"name":"delta_angle_degrees","qualname":"::ops::Wrap::delta_angle_degrees","value":"pub fn delta_angle_degrees(Self, Self) -> Self where Self: From<Bound> +\nSub<Output = Self> + PartialOrd, Bound: From<u16>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Calculates the shortest difference between two given angles, in degrees.","sig":null,"attributes":[{"value":"/ Calculates the shortest difference between two given angles, in degrees.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":25285,"byte_end":25361,"line_start":583,"line_end":583,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":25366,"byte_end":25369,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ This exists because it's enough for `Bound` to implement `From<u16>`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":25374,"byte_end":25447,"line_start":585,"line_end":585,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":86},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":29721,"byte_end":29735,"line_start":711,"line_end":711,"column_start":11,"column_end":25},"name":"ColorComponent","qualname":"::ops::ColorComponent","value":"ColorComponent: Zero","parent":null,"children":[{"krate":0,"index":87}],"decl_id":null,"docs":" Trait for types that are suitable for representing a color component value.\n","sig":null,"attributes":[{"value":"/ Trait for types that are suitable for representing a color component value.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":29631,"byte_end":29710,"line_start":710,"line_end":710,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":29908,"byte_end":29912,"line_start":715,"line_end":715,"column_start":8,"column_end":12},"name":"full","qualname":"::ops::ColorComponent::full","value":"pub fn full() -> Self","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" The minimum value such that the color is at its maximum.","sig":null,"attributes":[{"value":"/ The minimum value such that the color is at its maximum.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":29749,"byte_end":29809,"line_start":712,"line_end":712,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":29814,"byte_end":29817,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ In pratice, it yields `T::MAX` for integers and `1` for real number types.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":29822,"byte_end":29900,"line_start":714,"line_end":714,"column_start":5,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":125},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":1568},{"krate":0,"index":1584},{"krate":0,"index":1583},{"krate":0,"index":1581},{"krate":0,"index":1578},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":188},{"krate":0,"index":190}],"decl_id":null,"docs":" Vector types.","sig":null,"attributes":[{"value":"/ Vector types.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":40107,"byte_end":40124,"line_start":1,"line_end":1,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":40125,"byte_end":40128,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ They do NOT derive `PartialOrd` and `Ord`, because it makes no sense for them,","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":40129,"byte_end":40211,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/ and functions such as `partial_min` and `partial_max` may give surprising results","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":40212,"byte_end":40297,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ because of this.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":40298,"byte_end":40318,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/ They do have element-wise comparison functions though.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":40319,"byte_end":40377,"line_start":6,"line_end":6,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":150589,"byte_end":150601,"line_start":2482,"line_end":2482,"column_start":12,"column_end":24},"name":"ShuffleMask4","qualname":"::vec::ShuffleMask4","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque type wrapping a hardware-preferred shuffle mask format for 4D vectors.\n","sig":null,"attributes":[{"value":"/ Opaque type wrapping a hardware-preferred shuffle mask format for 4D vectors.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":150171,"byte_end":150252,"line_start":2475,"line_end":2475,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151210,"byte_end":151213,"line_start":2504,"line_end":2504,"column_start":12,"column_end":15},"name":"new","qualname":"<ShuffleMask4>::new","value":"pub fn new(usize, usize, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new shuffle mask from indices.\n","sig":null,"attributes":[{"value":"/ Creates a new shuffle mask from indices.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151140,"byte_end":151184,"line_start":2502,"line_end":2502,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151189,"byte_end":151198,"line_start":2503,"line_end":2503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151412,"byte_end":151422,"line_start":2508,"line_end":2508,"column_start":12,"column_end":22},"name":"to_indices","qualname":"<ShuffleMask4>::to_indices","value":"pub fn to_indices(&Self) -> (usize, usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Extracts indices from this shuffle mask.\n","sig":null,"attributes":[{"value":"/ Extracts indices from this shuffle mask.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151356,"byte_end":151400,"line_start":2507,"line_end":2507,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":188},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":182859,"byte_end":182865,"line_start":3176,"line_end":3176,"column_start":9,"column_end":15},"name":"repr_c","qualname":"::vec::repr_c","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":1586},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1643}],"decl_id":null,"docs":" Vector types which are marked `#[repr(C)]`.","sig":null,"attributes":[{"value":"/ Vector types which are marked `#[repr(C)]`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":182872,"byte_end":182919,"line_start":3177,"line_end":3177,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":182924,"byte_end":182927,"line_start":3178,"line_end":3178,"column_start":5,"column_end":8}},{"value":"/ See also the `repr_simd` neighbour module, which is available on Nightly","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":182932,"byte_end":183008,"line_start":3179,"line_end":3179,"column_start":5,"column_end":81}},{"value":"/ with the `repr_simd` feature enabled.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":183013,"byte_end":183054,"line_start":3180,"line_end":3180,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":192},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mat","qualname":"::mat","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":9065},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":230},{"krate":0,"index":243}],"decl_id":null,"docs":" Matrix types.\n","sig":null,"attributes":[{"value":"/ Matrix types.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":189219,"byte_end":189236,"line_start":1,"line_end":1,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":230},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":363411,"byte_end":363417,"line_start":4163,"line_end":4163,"column_start":9,"column_end":15},"name":"repr_c","qualname":"::mat::repr_c","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":5756},{"krate":0,"index":5758},{"krate":0,"index":5760}],"decl_id":null,"docs":" Matrix types which use `#[repr(C)]` vectors exclusively.","sig":null,"attributes":[{"value":"/ Matrix types which use `#[repr(C)]` vectors exclusively.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":363424,"byte_end":363484,"line_start":4164,"line_end":4164,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":363489,"byte_end":363492,"line_start":4165,"line_end":4165,"column_start":5,"column_end":8}},{"value":"/ See also the `repr_simd` neighbour module, which is available on Nightly","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":363497,"byte_end":363573,"line_start":4166,"line_end":4166,"column_start":5,"column_end":81}},{"value":"/ with the `repr_simd` feature enabled.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/mat.rs","byte_start":363578,"byte_end":363619,"line_start":4167,"line_end":4167,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":245},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/quaternion.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"quaternion","qualname":"::quaternion","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/quaternion.rs","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":260},{"krate":0,"index":262}],"decl_id":null,"docs":" Quaternions are a convenient representation for rotations in 3D spaces.\n","sig":null,"attributes":[{"value":"/ Quaternions are a convenient representation for rotations in 3D spaces.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/quaternion.rs","byte_start":371285,"byte_end":371360,"line_start":1,"line_end":1,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":260},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/quaternion.rs","byte_start":403212,"byte_end":403218,"line_start":749,"line_end":749,"column_start":9,"column_end":15},"name":"repr_c","qualname":"::quaternion::repr_c","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/quaternion.rs","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":7473},{"krate":0,"index":7585},{"krate":0,"index":7611},{"krate":0,"index":7608},{"krate":0,"index":7606},{"krate":0,"index":7602},{"krate":0,"index":7597},{"krate":0,"index":7599},{"krate":0,"index":7591},{"krate":0,"index":7593},{"krate":0,"index":7474},{"krate":0,"index":7477},{"krate":0,"index":7512},{"krate":0,"index":7518},{"krate":0,"index":7525},{"krate":0,"index":7529},{"krate":0,"index":7533},{"krate":0,"index":7537},{"krate":0,"index":7542},{"krate":0,"index":7548},{"krate":0,"index":7552},{"krate":0,"index":7556},{"krate":0,"index":7560},{"krate":0,"index":7564},{"krate":0,"index":7568},{"krate":0,"index":7572},{"krate":0,"index":7577},{"krate":0,"index":7581},{"krate":0,"index":7623},{"krate":0,"index":7627},{"krate":0,"index":7614},{"krate":0,"index":7617},{"krate":0,"index":7620}],"decl_id":null,"docs":" `Quaternion`s which are marked `#[repr(C)]`.\n","sig":null,"attributes":[{"value":"/ `Quaternion`s which are marked `#[repr(C)]`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/quaternion.rs","byte_start":403225,"byte_end":403273,"line_start":750,"line_end":750,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":264},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"transition","qualname":"::transition","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":7631},{"krate":0,"index":7647},{"krate":0,"index":7646},{"krate":0,"index":7644},{"krate":0,"index":7642},{"krate":0,"index":7639},{"krate":0,"index":7636},{"krate":0,"index":7637},{"krate":0,"index":7633},{"krate":0,"index":7634},{"krate":0,"index":275},{"krate":0,"index":7649},{"krate":0,"index":7673},{"krate":0,"index":7671},{"krate":0,"index":7668},{"krate":0,"index":7664},{"krate":0,"index":7658},{"krate":0,"index":7660},{"krate":0,"index":7653},{"krate":0,"index":7655},{"krate":0,"index":278},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":7676},{"krate":0,"index":7718},{"krate":0,"index":7713},{"krate":0,"index":7709},{"krate":0,"index":7703},{"krate":0,"index":7693},{"krate":0,"index":7697},{"krate":0,"index":7684},{"krate":0,"index":7688},{"krate":0,"index":289},{"krate":0,"index":294},{"krate":0,"index":299},{"krate":0,"index":306},{"krate":0,"index":322},{"krate":0,"index":325}],"decl_id":null,"docs":" Convenience structures for representing a transition from one value to another.","sig":null,"attributes":[{"value":"/ Convenience structures for representing a transition from one value to another.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405009,"byte_end":405092,"line_start":1,"line_end":1,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405093,"byte_end":405096,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The `Transition` struct is useful in animation, especially since it allows","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405097,"byte_end":405175,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ you to customize the interpolation function via what's called a \"Progress Mapper\", i.e","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405176,"byte_end":405266,"line_start":4,"line_end":4,"column_start":1,"column_end":91}},{"value":"/ an object that also acts as a function which, given a \"progress\" value, returns","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405267,"byte_end":405350,"line_start":5,"line_end":5,"column_start":1,"column_end":84}},{"value":"/ the LERP factor to use.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405351,"byte_end":405378,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405379,"byte_end":405382,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This is especially powerful since it allows for any kind of interpolation curve :","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405383,"byte_end":405468,"line_start":8,"line_end":8,"column_start":1,"column_end":86}},{"value":"/ exponential, logarithmic, sines, squares... One could even imagine a Progress Mapper based","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405469,"byte_end":405563,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"/ on Bézier curves.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405564,"byte_end":405586,"line_start":10,"line_end":10,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":272},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405973,"byte_end":405987,"line_start":22,"line_end":22,"column_start":11,"column_end":25},"name":"ProgressMapper","qualname":"::transition::ProgressMapper","value":"ProgressMapper<Progress = f32>","parent":null,"children":[{"krate":0,"index":274}],"decl_id":null,"docs":" A functor that maps a progress value to a LERP factor.\n","sig":null,"attributes":[{"value":"/ A functor that maps a progress value to a LERP factor.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":405904,"byte_end":405962,"line_start":21,"line_end":21,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406262,"byte_end":406274,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"map_progress","qualname":"::transition::ProgressMapper::map_progress","value":"pub fn map_progress(&Self, Progress) -> Progress","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Maps an unconstrained progress value to a LERP factor.","sig":null,"attributes":[{"value":"/ Maps an unconstrained progress value to a LERP factor.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406008,"byte_end":406066,"line_start":23,"line_end":23,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406071,"byte_end":406074,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ The input progress value should be between zero and one, but is not required to.  ","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406079,"byte_end":406165,"line_start":25,"line_end":25,"column_start":5,"column_end":91}},{"value":"/ The returned LERP factor should be between zero and one, but is not required to.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406170,"byte_end":406254,"line_start":26,"line_end":26,"column_start":5,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":7631},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406532,"byte_end":406554,"line_start":33,"line_end":33,"column_start":12,"column_end":34},"name":"IdentityProgressMapper","qualname":"::transition::IdentityProgressMapper","value":"","parent":null,"children":[],"decl_id":null,"docs":" A pass-through functor that returns progress values directly as LERP factors.\n","sig":null,"attributes":[{"value":"/ A pass-through functor that returns progress values directly as LERP factors.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406318,"byte_end":406399,"line_start":30,"line_end":30,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":7649},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406963,"byte_end":406979,"line_start":45,"line_end":45,"column_start":12,"column_end":28},"name":"ProgressMapperFn","qualname":"::transition::ProgressMapperFn","value":"","parent":null,"children":[],"decl_id":null,"docs":" A function pointer container that can map a progress value to a LERP factor.\n","sig":null,"attributes":[{"value":"/ A function pointer container that can map a progress value to a LERP factor.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406727,"byte_end":406807,"line_start":42,"line_end":42,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":7652},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406983,"byte_end":406997,"line_start":45,"line_end":45,"column_start":32,"column_end":46},"name":"0","qualname":"::transition::ProgressMapperFn::0","value":"fn(T) -> T","parent":{"krate":0,"index":7649},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7676},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407755,"byte_end":407765,"line_start":74,"line_end":74,"column_start":12,"column_end":22},"name":"Transition","qualname":"::transition::Transition","value":"Transition { start, end, progress, progress_mapper }","parent":null,"children":[{"krate":0,"index":7680},{"krate":0,"index":7681},{"krate":0,"index":7682},{"krate":0,"index":7683}],"decl_id":null,"docs":" A convenience structure for storing a progression from one value to another.\n","sig":null,"attributes":[{"value":"/ A convenience structure for storing a progression from one value to another.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407551,"byte_end":407631,"line_start":71,"line_end":71,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":7680},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407845,"byte_end":407850,"line_start":76,"line_end":76,"column_start":9,"column_end":14},"name":"start","qualname":"::transition::Transition::start","value":"T","parent":{"krate":0,"index":7676},"children":[],"decl_id":null,"docs":" The value when progress gets close to 0.\n","sig":null,"attributes":[{"value":"/ The value when progress gets close to 0.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407792,"byte_end":407836,"line_start":75,"line_end":75,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":7681},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407912,"byte_end":407915,"line_start":78,"line_end":78,"column_start":9,"column_end":12},"name":"end","qualname":"::transition::Transition::end","value":"T","parent":{"krate":0,"index":7676},"children":[],"decl_id":null,"docs":" The value when progress gets close to 1.\n","sig":null,"attributes":[{"value":"/ The value when progress gets close to 1.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407859,"byte_end":407903,"line_start":77,"line_end":77,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":7682},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407968,"byte_end":407976,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"name":"progress","qualname":"::transition::Transition::progress","value":"Progress","parent":{"krate":0,"index":7676},"children":[],"decl_id":null,"docs":" Expected to be between 0 and 1.\n","sig":null,"attributes":[{"value":"/ Expected to be between 0 and 1.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407924,"byte_end":407959,"line_start":79,"line_end":79,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":7683},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408067,"byte_end":408082,"line_start":82,"line_end":82,"column_start":9,"column_end":24},"name":"progress_mapper","qualname":"::transition::Transition::progress_mapper","value":"F","parent":{"krate":0,"index":7676},"children":[],"decl_id":null,"docs":" Functor that maps the current progress value to a LERP factor.\n","sig":null,"attributes":[{"value":"/ Functor that maps the current progress value to a LERP factor.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407992,"byte_end":408058,"line_start":81,"line_end":81,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408791,"byte_end":408802,"line_start":101,"line_end":101,"column_start":12,"column_end":23},"name":"with_mapper","qualname":"<Transition<T, F, Progress>>::with_mapper","value":"pub fn with_mapper(T, T, F) -> Self where Progress: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Transition` from `start` and `end` values and `progress_mapper`, setting `progress` to zero.\n","sig":null,"attributes":[{"value":"/ Creates a new `Transition` from `start` and `end` values and `progress_mapper`, setting `progress` to zero.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408668,"byte_end":408779,"line_start":100,"line_end":100,"column_start":5,"column_end":116}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409055,"byte_end":409079,"line_start":105,"line_end":105,"column_start":12,"column_end":36},"name":"with_mapper_and_progress","qualname":"<Transition<T, F, Progress>>::with_mapper_and_progress","value":"pub fn with_mapper_and_progress(T, T, F, Progress) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Transition` from `start`, `end`, `progress_mapper` and `progress` values.\n","sig":null,"attributes":[{"value":"/ Creates a new `Transition` from `start`, `end`, `progress_mapper` and `progress` values.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408951,"byte_end":409043,"line_start":104,"line_end":104,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409312,"byte_end":409322,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"into_range","qualname":"<Transition<T, F, Progress>>::into_range","value":"pub fn into_range(Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts this into a `Range`, dropping the `progress` and `progress_mapper` values.\n","sig":null,"attributes":[{"value":"/ Converts this into a `Range`, dropping the `progress` and `progress_mapper` values.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409213,"byte_end":409300,"line_start":108,"line_end":108,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409592,"byte_end":409604,"line_start":116,"line_end":116,"column_start":12,"column_end":24},"name":"into_current","qualname":"<Transition<T, F, Progress>>::into_current","value":"pub fn into_current(Self) -> T where T: Lerp<Progress, Output = T>,\nProgress: Clamp + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state, clamping progress to [0;1].\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state, clamping progress to [0;1].","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409512,"byte_end":409580,"line_start":115,"line_end":115,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409867,"byte_end":409889,"line_start":120,"line_end":120,"column_start":12,"column_end":34},"name":"into_current_unclamped","qualname":"<Transition<T, F, Progress>>::into_current_unclamped","value":"pub fn into_current_unclamped(Self) -> T where T: Lerp<Progress, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state using the `progress` value as-is.\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state using the `progress` value as-is.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409782,"byte_end":409855,"line_start":119,"line_end":119,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410127,"byte_end":410147,"line_start":124,"line_end":124,"column_start":12,"column_end":32},"name":"into_current_precise","qualname":"<Transition<T, F, Progress>>::into_current_precise","value":"pub fn into_current_precise(Self) -> T where T: Lerp<Progress, Output = T>,\nProgress: Clamp + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state, clamping progress to [0;1].\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state, clamping progress to [0;1].","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410047,"byte_end":410115,"line_start":123,"line_end":123,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410418,"byte_end":410448,"line_start":128,"line_end":128,"column_start":12,"column_end":42},"name":"into_current_unclamped_precise","qualname":"<Transition<T, F, Progress>>::into_current_unclamped_precise","value":"pub fn into_current_unclamped_precise(Self) -> T where T: Lerp<Progress,\nOutput = T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state using the `progress` value as-is.\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state using the `progress` value as-is.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410333,"byte_end":410406,"line_start":127,"line_end":127,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410694,"byte_end":410701,"line_start":132,"line_end":132,"column_start":12,"column_end":19},"name":"current","qualname":"<Transition<T, F, Progress>>::current","value":"pub fn current<'a>(&'a Self) -> T where &'a T: Lerp<Progress, Output = T>,\nProgress: Copy + Clamp + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state, clamping progress to [0;1].\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state, clamping progress to [0;1].","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410614,"byte_end":410682,"line_start":131,"line_end":131,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410985,"byte_end":411002,"line_start":136,"line_end":136,"column_start":12,"column_end":29},"name":"current_unclamped","qualname":"<Transition<T, F, Progress>>::current_unclamped","value":"pub fn current_unclamped<'a>(&'a Self) -> T where &'a T: Lerp<Progress, Output\n= T>, Progress: Copy","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state using the `progress` value as-is.\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state using the `progress` value as-is.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":410900,"byte_end":410973,"line_start":135,"line_end":135,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411270,"byte_end":411285,"line_start":140,"line_end":140,"column_start":12,"column_end":27},"name":"current_precise","qualname":"<Transition<T, F, Progress>>::current_precise","value":"pub fn current_precise<'a>(&'a Self) -> T where &'a T: Lerp<Progress, Output =\nT>, Progress: Copy + Clamp + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state, clamping progress to [0;1].\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state, clamping progress to [0;1].","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411190,"byte_end":411258,"line_start":139,"line_end":139,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411577,"byte_end":411602,"line_start":144,"line_end":144,"column_start":12,"column_end":37},"name":"current_unclamped_precise","qualname":"<Transition<T, F, Progress>>::current_unclamped_precise","value":"pub fn current_unclamped_precise<'a>(&'a Self) -> T where\n&'a T: Lerp<Progress, Output = T>, Progress: Copy","parent":null,"children":[],"decl_id":null,"docs":" Gets the transition's current state using the `progress` value as-is.\n","sig":null,"attributes":[{"value":"/ Gets the transition's current state using the `progress` value as-is.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411492,"byte_end":411565,"line_start":143,"line_end":143,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":322},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411894,"byte_end":411910,"line_start":150,"line_end":150,"column_start":10,"column_end":26},"name":"LinearTransition","qualname":"::transition::LinearTransition","value":"Transition<T, IdentityProgressMapper, Progress>","parent":null,"children":[],"decl_id":null,"docs":" A convenience structure for storing a linear progression from one value to another.\n","sig":null,"attributes":[{"value":"/ A convenience structure for storing a linear progression from one value to another.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411797,"byte_end":411884,"line_start":149,"line_end":149,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":412140,"byte_end":412143,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearTransition<T, Progress>>::new","value":"pub fn new(T, T) -> Self where Progress: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `LinearTransition` from `start` and `end` values, setting `progress` to zero.\n","sig":null,"attributes":[{"value":"/ Creates a new `LinearTransition` from `start` and `end` values, setting `progress` to zero.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":412033,"byte_end":412128,"line_start":153,"line_end":153,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":412383,"byte_end":412396,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"with_progress","qualname":"<LinearTransition<T, Progress>>::with_progress","value":"pub fn with_progress(T, T, Progress) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `LinearTransition` from `start`, `end` and `progress` values.\n","sig":null,"attributes":[{"value":"/ Creates a new `LinearTransition` from `start`, `end` and `progress` values.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":412292,"byte_end":412371,"line_start":157,"line_end":157,"column_start":5,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":331},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"transform","qualname":"::transform","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transform.rs","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" A convenient position + orientation + scale container, backed by two `Vec3` and a `Quaternion.`\n","sig":null,"attributes":[{"value":"/ A convenient position + orientation + scale container, backed by two `Vec3` and a `Quaternion.`","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transform.rs","byte_start":412529,"byte_end":412628,"line_start":1,"line_end":1,"column_start":1,"column_end":100}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transform.rs","byte_start":417897,"byte_end":417903,"line_start":128,"line_end":128,"column_start":9,"column_end":15},"name":"repr_c","qualname":"::transform::repr_c","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transform.rs","parent":null,"children":[{"krate":0,"index":7723},{"krate":0,"index":7724},{"krate":0,"index":7725},{"krate":0,"index":7726},{"krate":0,"index":7727},{"krate":0,"index":7728},{"krate":0,"index":7729},{"krate":0,"index":7730},{"krate":0,"index":7753},{"krate":0,"index":7794},{"krate":0,"index":7789},{"krate":0,"index":7785},{"krate":0,"index":7779},{"krate":0,"index":7770},{"krate":0,"index":7774},{"krate":0,"index":7760},{"krate":0,"index":7764},{"krate":0,"index":7731},{"krate":0,"index":7736},{"krate":0,"index":7744}],"decl_id":null,"docs":" `Transform` struct that uses `#[repr(C)]` vectors and quaternions.\n","sig":null,"attributes":[{"value":"/ `Transform` struct that uses `#[repr(C)]` vectors and quaternions.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transform.rs","byte_start":417910,"byte_end":417980,"line_start":129,"line_end":129,"column_start":5,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":336},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/bezier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bezier","qualname":"::bezier","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/bezier.rs","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":354},{"krate":0,"index":356}],"decl_id":null,"docs":" Low-order (quadratic and cubic) Bézier curves.\n","sig":null,"attributes":[{"value":"/ Low-order (quadratic and cubic) Bézier curves.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/bezier.rs","byte_start":418046,"byte_end":418097,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":354},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/bezier.rs","byte_start":455515,"byte_end":455521,"line_start":836,"line_end":836,"column_start":9,"column_end":15},"name":"repr_c","qualname":"::bezier::repr_c","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/bezier.rs","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":7799},{"krate":0,"index":7800},{"krate":0,"index":7801},{"krate":0,"index":7802},{"krate":0,"index":7803},{"krate":0,"index":7804},{"krate":0,"index":7805},{"krate":0,"index":7806},{"krate":0,"index":7807},{"krate":0,"index":7808},{"krate":0,"index":7809},{"krate":0,"index":7810},{"krate":0,"index":7811},{"krate":0,"index":7812},{"krate":0,"index":7813},{"krate":0,"index":7814},{"krate":0,"index":7815},{"krate":0,"index":7816},{"krate":0,"index":7817},{"krate":0,"index":7847},{"krate":0,"index":7875},{"krate":0,"index":7872},{"krate":0,"index":7870},{"krate":0,"index":7867},{"krate":0,"index":7863},{"krate":0,"index":7857},{"krate":0,"index":7859},{"krate":0,"index":7852},{"krate":0,"index":7854},{"krate":0,"index":7818},{"krate":0,"index":7826},{"krate":0,"index":7835},{"krate":0,"index":7838},{"krate":0,"index":7841},{"krate":0,"index":7844},{"krate":0,"index":7878},{"krate":0,"index":7884},{"krate":0,"index":7910},{"krate":0,"index":7890},{"krate":0,"index":7895},{"krate":0,"index":7900},{"krate":0,"index":7905},{"krate":0,"index":7925},{"krate":0,"index":7928},{"krate":0,"index":7960},{"krate":0,"index":7988},{"krate":0,"index":7985},{"krate":0,"index":7983},{"krate":0,"index":7980},{"krate":0,"index":7976},{"krate":0,"index":7970},{"krate":0,"index":7972},{"krate":0,"index":7965},{"krate":0,"index":7967},{"krate":0,"index":7931},{"krate":0,"index":7939},{"krate":0,"index":7948},{"krate":0,"index":7951},{"krate":0,"index":7954},{"krate":0,"index":7957},{"krate":0,"index":7991},{"krate":0,"index":7997},{"krate":0,"index":8003},{"krate":0,"index":8035},{"krate":0,"index":8009},{"krate":0,"index":8015},{"krate":0,"index":8020},{"krate":0,"index":8025},{"krate":0,"index":8030},{"krate":0,"index":8050},{"krate":0,"index":8053},{"krate":0,"index":8090},{"krate":0,"index":8119},{"krate":0,"index":8116},{"krate":0,"index":8114},{"krate":0,"index":8111},{"krate":0,"index":8107},{"krate":0,"index":8101},{"krate":0,"index":8103},{"krate":0,"index":8096},{"krate":0,"index":8098},{"krate":0,"index":8056},{"krate":0,"index":8066},{"krate":0,"index":8075},{"krate":0,"index":8078},{"krate":0,"index":8081},{"krate":0,"index":8084},{"krate":0,"index":8087},{"krate":0,"index":8122},{"krate":0,"index":8129},{"krate":0,"index":8156},{"krate":0,"index":8136},{"krate":0,"index":8141},{"krate":0,"index":8146},{"krate":0,"index":8151},{"krate":0,"index":8171},{"krate":0,"index":8174},{"krate":0,"index":8211},{"krate":0,"index":8240},{"krate":0,"index":8237},{"krate":0,"index":8235},{"krate":0,"index":8232},{"krate":0,"index":8228},{"krate":0,"index":8222},{"krate":0,"index":8224},{"krate":0,"index":8217},{"krate":0,"index":8219},{"krate":0,"index":8177},{"krate":0,"index":8187},{"krate":0,"index":8196},{"krate":0,"index":8199},{"krate":0,"index":8202},{"krate":0,"index":8205},{"krate":0,"index":8208},{"krate":0,"index":8243},{"krate":0,"index":8250},{"krate":0,"index":8257},{"krate":0,"index":8290},{"krate":0,"index":8264},{"krate":0,"index":8270},{"krate":0,"index":8275},{"krate":0,"index":8280},{"krate":0,"index":8285},{"krate":0,"index":8305},{"krate":0,"index":8308}],"decl_id":null,"docs":" Bézier curve structs that use `#[repr(C)]` vectors.\n","sig":null,"attributes":[{"value":"/ Bézier curve structs that use `#[repr(C)]` vectors.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/bezier.rs","byte_start":455528,"byte_end":455584,"line_start":837,"line_end":837,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":358},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geom","qualname":"::geom","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":8311},{"krate":0,"index":8339},{"krate":0,"index":8336},{"krate":0,"index":8334},{"krate":0,"index":8330},{"krate":0,"index":8325},{"krate":0,"index":8327},{"krate":0,"index":8319},{"krate":0,"index":8321},{"krate":0,"index":374},{"krate":0,"index":376}],"decl_id":null,"docs":" Common and trivial geometric primitives.\n","sig":null,"attributes":[{"value":"/ Common and trivial geometric primitives.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":456571,"byte_end":456615,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":8311},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476678,"byte_end":476691,"line_start":455,"line_end":455,"column_start":12,"column_end":25},"name":"FrustumPlanes","qualname":"::geom::FrustumPlanes","value":"FrustumPlanes { left, right, bottom, top, near, far }","parent":null,"children":[{"krate":0,"index":8313},{"krate":0,"index":8314},{"krate":0,"index":8315},{"krate":0,"index":8316},{"krate":0,"index":8317},{"krate":0,"index":8318}],"decl_id":null,"docs":" Data that represents distance offsets of frustum planes from an origin.\n","sig":null,"attributes":[{"value":"/ Data that represents distance offsets of frustum planes from an origin.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476435,"byte_end":476510,"line_start":451,"line_end":451,"column_start":1,"column_end":76}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476644,"byte_end":476666,"line_start":454,"line_end":454,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":8313},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476705,"byte_end":476709,"line_start":456,"line_end":456,"column_start":9,"column_end":13},"name":"left","qualname":"::geom::FrustumPlanes::left","value":"T","parent":{"krate":0,"index":8311},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8314},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476722,"byte_end":476727,"line_start":457,"line_end":457,"column_start":9,"column_end":14},"name":"right","qualname":"::geom::FrustumPlanes::right","value":"T","parent":{"krate":0,"index":8311},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8315},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476740,"byte_end":476746,"line_start":458,"line_end":458,"column_start":9,"column_end":15},"name":"bottom","qualname":"::geom::FrustumPlanes::bottom","value":"T","parent":{"krate":0,"index":8311},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8316},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476759,"byte_end":476762,"line_start":459,"line_end":459,"column_start":9,"column_end":12},"name":"top","qualname":"::geom::FrustumPlanes::top","value":"T","parent":{"krate":0,"index":8311},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8317},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476775,"byte_end":476779,"line_start":460,"line_end":460,"column_start":9,"column_end":13},"name":"near","qualname":"::geom::FrustumPlanes::near","value":"T","parent":{"krate":0,"index":8311},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8318},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":476792,"byte_end":476795,"line_start":461,"line_end":461,"column_start":9,"column_end":12},"name":"far","qualname":"::geom::FrustumPlanes::far","value":"T","parent":{"krate":0,"index":8311},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":374},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":489926,"byte_end":489932,"line_start":775,"line_end":775,"column_start":9,"column_end":15},"name":"repr_c","qualname":"::geom::repr_c","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":8342},{"krate":0,"index":8361},{"krate":0,"index":8399},{"krate":0,"index":8395},{"krate":0,"index":8391},{"krate":0,"index":8388},{"krate":0,"index":8383},{"krate":0,"index":8376},{"krate":0,"index":8379},{"krate":0,"index":8368},{"krate":0,"index":8371},{"krate":0,"index":8403},{"krate":0,"index":8418},{"krate":0,"index":8425},{"krate":0,"index":8438},{"krate":0,"index":8442},{"krate":0,"index":8445},{"krate":0,"index":8448},{"krate":0,"index":8475},{"krate":0,"index":8472},{"krate":0,"index":8469},{"krate":0,"index":8467},{"krate":0,"index":8463},{"krate":0,"index":8458},{"krate":0,"index":8460},{"krate":0,"index":8452},{"krate":0,"index":8454},{"krate":0,"index":8343},{"krate":0,"index":8478},{"krate":0,"index":8509},{"krate":0,"index":8549},{"krate":0,"index":8545},{"krate":0,"index":8541},{"krate":0,"index":8538},{"krate":0,"index":8533},{"krate":0,"index":8526},{"krate":0,"index":8529},{"krate":0,"index":8518},{"krate":0,"index":8521},{"krate":0,"index":8553},{"krate":0,"index":8568},{"krate":0,"index":8575},{"krate":0,"index":8590},{"krate":0,"index":8594},{"krate":0,"index":8597},{"krate":0,"index":8600},{"krate":0,"index":8627},{"krate":0,"index":8624},{"krate":0,"index":8621},{"krate":0,"index":8619},{"krate":0,"index":8615},{"krate":0,"index":8610},{"krate":0,"index":8612},{"krate":0,"index":8604},{"krate":0,"index":8606},{"krate":0,"index":8630},{"krate":0,"index":8663},{"krate":0,"index":8699},{"krate":0,"index":8695},{"krate":0,"index":8691},{"krate":0,"index":8688},{"krate":0,"index":8683},{"krate":0,"index":8676},{"krate":0,"index":8679},{"krate":0,"index":8668},{"krate":0,"index":8671},{"krate":0,"index":8346},{"krate":0,"index":8703},{"krate":0,"index":8711},{"krate":0,"index":8714},{"krate":0,"index":8719},{"krate":0,"index":8755},{"krate":0,"index":8751},{"krate":0,"index":8747},{"krate":0,"index":8744},{"krate":0,"index":8739},{"krate":0,"index":8732},{"krate":0,"index":8735},{"krate":0,"index":8724},{"krate":0,"index":8727},{"krate":0,"index":8351},{"krate":0,"index":8759},{"krate":0,"index":8767},{"krate":0,"index":8770},{"krate":0,"index":8775},{"krate":0,"index":8811},{"krate":0,"index":8807},{"krate":0,"index":8803},{"krate":0,"index":8800},{"krate":0,"index":8795},{"krate":0,"index":8788},{"krate":0,"index":8791},{"krate":0,"index":8780},{"krate":0,"index":8783},{"krate":0,"index":8815},{"krate":0,"index":8851},{"krate":0,"index":8847},{"krate":0,"index":8843},{"krate":0,"index":8840},{"krate":0,"index":8835},{"krate":0,"index":8828},{"krate":0,"index":8831},{"krate":0,"index":8820},{"krate":0,"index":8823},{"krate":0,"index":8855},{"krate":0,"index":8882},{"krate":0,"index":8879},{"krate":0,"index":8876},{"krate":0,"index":8874},{"krate":0,"index":8870},{"krate":0,"index":8865},{"krate":0,"index":8867},{"krate":0,"index":8859},{"krate":0,"index":8861},{"krate":0,"index":8885},{"krate":0,"index":8912},{"krate":0,"index":8909},{"krate":0,"index":8906},{"krate":0,"index":8904},{"krate":0,"index":8900},{"krate":0,"index":8895},{"krate":0,"index":8897},{"krate":0,"index":8889},{"krate":0,"index":8891},{"krate":0,"index":8915},{"krate":0,"index":8918},{"krate":0,"index":8925},{"krate":0,"index":8928},{"krate":0,"index":8935},{"krate":0,"index":8962},{"krate":0,"index":8959},{"krate":0,"index":8956},{"krate":0,"index":8954},{"krate":0,"index":8950},{"krate":0,"index":8945},{"krate":0,"index":8947},{"krate":0,"index":8939},{"krate":0,"index":8941},{"krate":0,"index":8356}],"decl_id":null,"docs":" Basic geometric primitives that use `#[repr(C)]` vectors.\n","sig":null,"attributes":[{"value":"/ Basic geometric primitives that use `#[repr(C)]` vectors.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/geom.rs","byte_start":489939,"byte_end":490000,"line_start":776,"line_end":776,"column_start":5,"column_end":66}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4879,"byte_end":4880,"line_start":51,"line_end":51,"column_start":49,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6835,"byte_end":6836,"line_start":102,"line_end":102,"column_start":41,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":7034,"byte_end":7035,"line_start":106,"line_end":106,"column_start":54,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":30767,"byte_end":30775,"line_start":730,"line_end":730,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":30865,"byte_end":30873,"line_start":731,"line_end":731,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":30963,"byte_end":30971,"line_start":732,"line_end":732,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31061,"byte_end":31069,"line_start":733,"line_end":733,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31259,"byte_end":31267,"line_start":735,"line_end":735,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31357,"byte_end":31365,"line_start":736,"line_end":736,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31455,"byte_end":31463,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31553,"byte_end":31561,"line_start":738,"line_end":738,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":150722,"byte_end":150734,"line_start":2485,"line_end":2485,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":150848,"byte_end":150860,"line_start":2490,"line_end":2490,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151014,"byte_end":151026,"line_start":2496,"line_end":2496,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151121,"byte_end":151133,"line_start":2501,"line_end":2501,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406601,"byte_end":406623,"line_start":35,"line_end":35,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407094,"byte_end":407110,"line_start":48,"line_end":48,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407256,"byte_end":407272,"line_start":55,"line_end":55,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407425,"byte_end":407441,"line_start":63,"line_end":63,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408146,"byte_end":408156,"line_start":84,"line_end":84,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408437,"byte_end":408447,"line_start":94,"line_end":94,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408635,"byte_end":408645,"line_start":99,"line_end":99,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409445,"byte_end":409455,"line_start":114,"line_end":114,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411997,"byte_end":412013,"line_start":152,"line_end":152,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2588,"byte_end":2591,"line_start":71,"line_end":71,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":9}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2624,"byte_end":2627,"line_start":73,"line_end":73,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":125}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2660,"byte_end":2663,"line_start":75,"line_end":75,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":192}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2696,"byte_end":2706,"line_start":77,"line_end":77,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":245}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2746,"byte_end":2756,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":264}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2796,"byte_end":2805,"line_start":81,"line_end":81,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":331}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2844,"byte_end":2850,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":336}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/lib.rs","byte_start":2886,"byte_end":2890,"line_start":85,"line_end":85,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":358}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":3763,"byte_end":3768,"line_start":22,"line_end":22,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":22}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4805,"byte_end":4814,"line_start":50,"line_end":50,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":22},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4817,"byte_end":4821,"line_start":50,"line_end":50,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":17,"index":301},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4824,"byte_end":4827,"line_start":50,"line_end":50,"column_start":43,"column_end":46},"kind":"SuperTrait","from":{"krate":17,"index":311},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":4879,"byte_end":4880,"line_start":51,"line_end":51,"column_start":49,"column_end":50},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":29},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":5000,"byte_end":5005,"line_start":55,"line_end":55,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":30}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6773,"byte_end":6778,"line_start":101,"line_end":101,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":30},"to":{"krate":0,"index":38}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6781,"byte_end":6785,"line_start":101,"line_end":101,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":17,"index":301},"to":{"krate":0,"index":38}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6788,"byte_end":6791,"line_start":101,"line_end":101,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":17,"index":311},"to":{"krate":0,"index":38}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6835,"byte_end":6836,"line_start":102,"line_end":102,"column_start":41,"column_end":42},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":0,"index":38}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6947,"byte_end":6952,"line_start":105,"line_end":105,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":30},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6955,"byte_end":6958,"line_start":105,"line_end":105,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":17,"index":311},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":6961,"byte_end":6964,"line_start":105,"line_end":105,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2063},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":7034,"byte_end":7035,"line_start":106,"line_end":106,"column_start":54,"column_end":55},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":43},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":12641,"byte_end":12646,"line_start":273,"line_end":273,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":58}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":19365,"byte_end":19370,"line_start":443,"line_end":443,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":67}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":20007,"byte_end":20012,"line_start":457,"line_end":457,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":29738,"byte_end":29742,"line_start":711,"line_end":711,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":17,"index":301},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":30767,"byte_end":30775,"line_start":730,"line_end":730,"column_start":25,"column_end":33},"kind":{"Impl":{"id":189}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":30865,"byte_end":30873,"line_start":731,"line_end":731,"column_start":25,"column_end":33},"kind":{"Impl":{"id":190}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":30963,"byte_end":30971,"line_start":732,"line_end":732,"column_start":25,"column_end":33},"kind":{"Impl":{"id":191}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31061,"byte_end":31069,"line_start":733,"line_end":733,"column_start":25,"column_end":33},"kind":{"Impl":{"id":192}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31259,"byte_end":31267,"line_start":735,"line_end":735,"column_start":25,"column_end":33},"kind":{"Impl":{"id":193}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31357,"byte_end":31365,"line_start":736,"line_end":736,"column_start":25,"column_end":33},"kind":{"Impl":{"id":194}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31455,"byte_end":31463,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"kind":{"Impl":{"id":195}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/ops.rs","byte_start":31553,"byte_end":31561,"line_start":738,"line_end":738,"column_start":25,"column_end":33},"kind":{"Impl":{"id":196}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":86}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":150722,"byte_end":150734,"line_start":2485,"line_end":2485,"column_start":22,"column_end":34},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":150848,"byte_end":150860,"line_start":2490,"line_end":2490,"column_start":45,"column_end":57},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151014,"byte_end":151026,"line_start":2496,"line_end":2496,"column_start":27,"column_end":39},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/vec.rs","byte_start":151121,"byte_end":151133,"line_start":2501,"line_end":2501,"column_start":6,"column_end":18},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":406601,"byte_end":406623,"line_start":35,"line_end":35,"column_start":45,"column_end":67},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":7631},"to":{"krate":0,"index":272}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407094,"byte_end":407110,"line_start":48,"line_end":48,"column_start":21,"column_end":37},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":7649},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407256,"byte_end":407272,"line_start":55,"line_end":55,"column_start":30,"column_end":46},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":7649},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":407425,"byte_end":407441,"line_start":63,"line_end":63,"column_start":45,"column_end":61},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":7649},"to":{"krate":0,"index":272}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408146,"byte_end":408156,"line_start":84,"line_end":84,"column_start":58,"column_end":68},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":7676},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408437,"byte_end":408447,"line_start":94,"line_end":94,"column_start":56,"column_end":66},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":7676},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":408635,"byte_end":408645,"line_start":99,"line_end":99,"column_start":22,"column_end":32},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":7676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":409445,"byte_end":409455,"line_start":114,"line_end":114,"column_start":22,"column_end":32},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":7676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/vek-0.12.0/src/transition.rs","byte_start":411997,"byte_end":412013,"line_start":152,"line_end":152,"column_start":19,"column_end":35},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":322},"to":{"krate":4294967295,"index":4294967295}}]}