{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2","program":"/Users/marcpartensky/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","weezl","--edition=2018","/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=3b4f88d209a7c534","-C","extra-filename=-3b4f88d209a7c534","--out-dir","/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps","-L","dependency=/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/marcpartensky/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/marcpartensky/Programs/Rust/Pong-Tutorial/pong/target/rls/debug/deps/libweezl-3b4f88d209a7c534.rmeta"},"prelude":{"crate_id":{"name":"weezl","disambiguator":[2407607343720048586,1918124179607286839]},"crate_root":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src","external_crates":[{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9176452395873514981,10525323411957323785]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","num":2,"id":{"name":"core","disambiguator":[15010738070622620763,9605760616786660431]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8211843569075862794,5370502913999467694]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5168977417888994485,12129851499920233632]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9254821246596336482,1562696929571001984]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4867494102928472883,16549916413327868340]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12208796569805280475,9421298070223625802]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16776259526442764164,2692171601035033462]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8506315589905780113,7752550639658555424]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6004073670142137807,10055010459345902388]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13812981793209371227,10465105188798852626]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[12279896640040761358,16819944754252654372]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[502125910674001101,4874613814734389117]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[6964077277237141888,7151316435171244180]}},{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[5505266058476155326,9550778519957076375]}}],"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":0,"byte_end":3843,"line_start":1,"line_end":108,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":3035,"byte_end":3047,"line_start":81,"line_end":81,"column_start":22,"column_end":34},"alias_span":null,"name":"StreamResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":321},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":3071,"byte_end":3083,"line_start":82,"line_end":82,"column_start":23,"column_end":35},"alias_span":null,"name":"BufferResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":3085,"byte_end":3093,"line_start":82,"line_end":82,"column_start":37,"column_end":45},"alias_span":null,"name":"LzwError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":3095,"byte_end":3104,"line_start":82,"line_end":82,"column_start":47,"column_end":56},"alias_span":null,"name":"LzwStatus","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":0,"byte_end":3843,"line_start":1,"line_end":108,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":21},{"krate":0,"index":173},{"krate":0,"index":320},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"decl_id":null,"docs":" # LZW decoder and encoder","sig":null,"attributes":[{"value":"/ # LZW decoder and encoder","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":0,"byte_end":29,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":30,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crates provides an `Encoder` and a `Decoder` in their respective modules. The code words","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":34,"byte_end":131,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ are written from and to bit byte slices (or streams) where it is possible to write either the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":132,"byte_end":229,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ most or least significant bits first. The maximum possible code size is 12 bits, the smallest","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":230,"byte_end":327,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ available code size is 2 bits.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":328,"byte_end":362,"line_start":6,"line_end":6,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":363,"byte_end":366,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The de- and encoder expect the LZW stream to start with a clear code and end with an","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":367,"byte_end":455,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ end code which are defined as follows:","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":456,"byte_end":498,"line_start":9,"line_end":9,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":499,"byte_end":502,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/  * `CLEAR_CODE == 1 << min_code_size`","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":503,"byte_end":544,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/  * `END_CODE   == CLEAR_CODE + 1`","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":545,"byte_end":582,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":583,"byte_end":586,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ For optimal performance, all buffers and input and output slices should be as large as possible","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":587,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/ and at least 2048 bytes long. This extends to input streams which should have similarly sized","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":687,"byte_end":784,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ buffers. This library uses Rust's standard allocation interfaces (`Box` and `Vec` to be","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":785,"byte_end":876,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/ precise). Since there are no ways to handle allocation errors it is not recommended to operate","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":877,"byte_end":975,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ it on 16-bit targets.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":976,"byte_end":1001,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1002,"byte_end":1005,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Exemplary use of the encoder:","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1006,"byte_end":1039,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1040,"byte_end":1043,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ use weezl::{BitOrder, encode::Encoder};","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1141,"byte_end":1184,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/ let size = 8;","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1185,"byte_end":1202,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ let data = b\"TOBEORNOTTOBEORTOBEORNOT\";","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1203,"byte_end":1246,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/ let mut compressed = vec![];","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1247,"byte_end":1279,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1280,"byte_end":1283,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut enc = Encoder::new(BitOrder::Msb, size);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1284,"byte_end":1336,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ let result = enc.into_stream(&mut compressed).encode(&data[..]);","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1337,"byte_end":1405,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ result.status.unwrap();","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1406,"byte_end":1433,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1434,"byte_end":1441,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1442,"byte_end":1445,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The main algorithm can be used in `no_std` as well, although it requires an allocator. This","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1446,"byte_end":1541,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ restriction might be lifted at a later stage. For this you should deactivate the `std` feature.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1542,"byte_end":1641,"line_start":35,"line_end":35,"column_start":1,"column_end":100}},{"value":"/ The main interfaces stay intact but the `into_stream` combinator is no available.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1642,"byte_end":1727,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1771,"byte_end":1794,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"forbid(missing_docs)","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":1795,"byte_end":1819,"line_start":39,"line_end":39,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2640,"byte_end":2643,"line_start":62,"line_end":62,"column_start":5,"column_end":8},"name":"Msb","qualname":"::BitOrder::Msb","value":"BitOrder::Msb","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" The most significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The most significant bit is processed first.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2587,"byte_end":2635,"line_start":61,"line_end":61,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":11},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2703,"byte_end":2706,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"Lsb","qualname":"::BitOrder::Lsb","value":"BitOrder::Lsb","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" The least significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The least significant bit is processed first.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2649,"byte_end":2698,"line_start":63,"line_end":63,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":8},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2572,"byte_end":2580,"line_start":60,"line_end":60,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"pub enum BitOrder {\n\n    /// The most significant bit is processed first.\n    Msb,\n\n    /// The least significant bit is processed first.\n    Lsb,\n}","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":11}],"decl_id":null,"docs":" The order of bits in bytes.\n","sig":null,"attributes":[{"value":"/ The order of bits in bytes.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2531,"byte_end":2562,"line_start":59,"line_end":59,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":21},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":442},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":51},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":354},{"krate":0,"index":56},{"krate":0,"index":65},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":95},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":129},{"krate":0,"index":135},{"krate":0,"index":145},{"krate":0,"index":155},{"krate":0,"index":161},{"krate":0,"index":170}],"decl_id":null,"docs":" A module for all decoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2894,"byte_end":2919,"line_start":74,"line_end":74,"column_start":1,"column_end":26}},{"value":"/ A module for all decoding needs.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":3845,"byte_end":3881,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4491,"byte_end":4498,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decode::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":43}],"decl_id":null,"docs":" The state for decoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for decoding data with an LZW algorithm.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4187,"byte_end":4241,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4242,"byte_end":4245,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4246,"byte_end":4343,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose or skip any","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4344,"byte_end":4439,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ already decode data in the process.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4440,"byte_end":4479,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4889,"byte_end":4899,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::decode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" A decoding stream sink.","sig":null,"attributes":[{"value":"/ A decoding stream sink.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4551,"byte_end":4578,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4579,"byte_end":4582,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`Decoder::into_stream`] on how to create this type.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4583,"byte_end":4643,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4644,"byte_end":4647,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`Decoder::into_stream`]: struct.Decoder.html#method.into_stream","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":4648,"byte_end":4716,"line_start":24,"line_end":24,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7713,"byte_end":7716,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new decoder with the specified bit order and symbol size.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7372,"byte_end":7442,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7447,"byte_end":7450,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7455,"byte_end":7548,"line_start":127,"line_end":127,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to decode","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7553,"byte_end":7647,"line_start":128,"line_end":128,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7652,"byte_end":7701,"line_start":129,"line_end":129,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":8416,"byte_end":8437,"line_start":145,"line_end":145,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Decoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible decoder with the specified bit order and symbol size.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":8064,"byte_end":8146,"line_start":140,"line_end":140,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":8151,"byte_end":8154,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":8159,"byte_end":8252,"line_start":142,"line_end":142,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":8257,"byte_end":8350,"line_start":143,"line_end":143,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":8355,"byte_end":8404,"line_start":144,"line_end":144,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9776,"byte_end":9788,"line_start":177,"line_end":177,"column_start":12,"column_end":24},"name":"decode_bytes","qualname":"<Decoder>::decode_bytes","value":"pub fn decode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Decode some bytes from `inp` and write result to `out`.","sig":null,"attributes":[{"value":"/ Decode some bytes from `inp` and write result to `out`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9001,"byte_end":9060,"line_start":163,"line_end":163,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9065,"byte_end":9068,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ This will consume a prefix of the input buffer and write decoded output into a prefix of","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9073,"byte_end":9165,"line_start":165,"line_end":165,"column_start":5,"column_end":97}},{"value":"/ the output buffer. See the respective fields of the return value for the count of consumed","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9170,"byte_end":9264,"line_start":166,"line_end":166,"column_start":5,"column_end":99}},{"value":"/ and written bytes. For the next call You should have adjusted the inputs accordingly.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9269,"byte_end":9358,"line_start":167,"line_end":167,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9363,"byte_end":9366,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ The call will try to decode and write as many bytes of output as available. It will be","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9371,"byte_end":9461,"line_start":169,"line_end":169,"column_start":5,"column_end":95}},{"value":"/ much more optimized (and avoid intermediate buffering) if it is allowed to write a large","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9466,"byte_end":9558,"line_start":170,"line_end":170,"column_start":5,"column_end":97}},{"value":"/ contiguous chunk at once.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9563,"byte_end":9592,"line_start":171,"line_end":171,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9597,"byte_end":9600,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (that are only available with the `std`","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9605,"byte_end":9693,"line_start":173,"line_end":173,"column_start":5,"column_end":93}},{"value":"/ feature).","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9698,"byte_end":9711,"line_start":174,"line_end":174,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9716,"byte_end":9719,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9724,"byte_end":9764,"line_start":176,"line_end":176,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9972,"byte_end":9983,"line_start":183,"line_end":183,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Decoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a decoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a decoder into a writer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9894,"byte_end":9932,"line_start":181,"line_end":181,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":9937,"byte_end":9960,"line_start":182,"line_end":182,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":10490,"byte_end":10499,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"has_ended","qualname":"<Decoder>::has_ended","value":"pub fn has_ended(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the decoding has finished.","sig":null,"attributes":[{"value":"/ Check if the decoding has finished.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":10197,"byte_end":10236,"line_start":192,"line_end":192,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":10241,"byte_end":10244,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ No more output is produced beyond the end code that marked the finish of the stream. The","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":10249,"byte_end":10341,"line_start":194,"line_end":194,"column_start":5,"column_end":97}},{"value":"/ decoder may have read additional bytes, including padding bits beyond the last code word","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":10346,"byte_end":10438,"line_start":195,"line_end":195,"column_start":5,"column_end":97}},{"value":"/ but also excess bytes provided.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":10443,"byte_end":10478,"line_start":196,"line_end":196,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11388,"byte_end":11393,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11118,"byte_end":11147,"line_start":214,"line_end":214,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11152,"byte_end":11155,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This produce a decoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11160,"byte_end":11254,"line_start":216,"line_end":216,"column_start":5,"column_end":99}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11259,"byte_end":11346,"line_start":217,"line_end":217,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11351,"byte_end":11376,"line_start":218,"line_end":218,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11644,"byte_end":11650,"line_start":229,"line_end":229,"column_start":12,"column_end":18},"name":"decode","qualname":"<IntoStream>::decode","value":"pub fn decode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader.","sig":null,"attributes":[{"value":"/ Decode data from a reader.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11511,"byte_end":11541,"line_start":226,"line_end":226,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11546,"byte_end":11549,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This will read data until the stream is empty or an end marker is reached.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11554,"byte_end":11632,"line_start":228,"line_end":228,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11816,"byte_end":11826,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"decode_all","qualname":"<IntoStream>::decode_all","value":"pub fn decode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader, requiring an end marker.\n","sig":null,"attributes":[{"value":"/ Decode data from a reader, requiring an end marker.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11749,"byte_end":11804,"line_start":233,"line_end":233,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12303,"byte_end":12318,"line_start":246,"line_end":246,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate decode buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11923,"byte_end":11974,"line_start":238,"line_end":238,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11979,"byte_end":11982,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the decoded stream when no buffer is","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11987,"byte_end":12082,"line_start":240,"line_end":240,"column_start":5,"column_end":100}},{"value":"/ available and any decoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12087,"byte_end":12178,"line_start":241,"line_end":241,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12183,"byte_end":12221,"line_start":242,"line_end":242,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12226,"byte_end":12229,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12234,"byte_end":12246,"line_start":244,"line_end":244,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12251,"byte_end":12291,"line_start":245,"line_end":245,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":13032,"byte_end":13042,"line_start":261,"line_end":261,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate decode buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12452,"byte_end":12513,"line_start":251,"line_end":251,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12518,"byte_end":12521,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12526,"byte_end":12614,"line_start":253,"line_end":253,"column_start":5,"column_end":93}},{"value":"/ instead of dynamically allocating a buffer. Note that the size of the buffer is critical","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12619,"byte_end":12711,"line_start":254,"line_end":254,"column_start":5,"column_end":97}},{"value":"/ for efficient decoding. Some optimization techniques require the buffer to hold one or more","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12716,"byte_end":12811,"line_start":255,"line_end":255,"column_start":5,"column_end":100}},{"value":"/ previous decoded words. There is also additional overhead from `write` calls each time the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12816,"byte_end":12910,"line_start":256,"line_end":256,"column_start":5,"column_end":99}},{"value":"/ buffer has been filled.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12915,"byte_end":12942,"line_start":257,"line_end":257,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12947,"byte_end":12950,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12955,"byte_end":12967,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":12972,"byte_end":13020,"line_start":260,"line_end":260,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":173},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":202},{"krate":0,"index":207},{"krate":0,"index":216},{"krate":0,"index":220},{"krate":0,"index":224},{"krate":0,"index":356},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":372},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":378},{"krate":0,"index":377},{"krate":0,"index":234},{"krate":0,"index":380},{"krate":0,"index":387},{"krate":0,"index":386},{"krate":0,"index":391},{"krate":0,"index":395},{"krate":0,"index":394},{"krate":0,"index":235},{"krate":0,"index":246},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":275},{"krate":0,"index":282},{"krate":0,"index":292},{"krate":0,"index":302},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":316},{"krate":0,"index":318}],"decl_id":null,"docs":" A module for all encoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2936,"byte_end":2961,"line_start":76,"line_end":76,"column_start":1,"column_end":26}},{"value":"/ A module for all encoding needs.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":44325,"byte_end":44361,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":193},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":44951,"byte_end":44958,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encode::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":194}],"decl_id":null,"docs":" The state for encoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for encoding data with an LZW algorithm.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":44662,"byte_end":44716,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":44717,"byte_end":44720,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":44721,"byte_end":44818,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose any written","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":44819,"byte_end":44914,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ data in the process.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":44915,"byte_end":44939,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":195},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":45551,"byte_end":45561,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::encode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" A encoding stream sink.","sig":null,"attributes":[{"value":"/ A encoding stream sink.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":45213,"byte_end":45240,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":45241,"byte_end":45244,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See [`Encoder::into_stream`] on how to create this type.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":45245,"byte_end":45305,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":45306,"byte_end":45309,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::into_stream`]: struct.Encoder.html#method.into_stream","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":45310,"byte_end":45378,"line_start":27,"line_end":27,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48664,"byte_end":48667,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new encoder with the specified bit order and symbol size.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48323,"byte_end":48393,"line_start":139,"line_end":139,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48398,"byte_end":48401,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48406,"byte_end":48499,"line_start":141,"line_end":141,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to encode","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48504,"byte_end":48598,"line_start":142,"line_end":142,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48603,"byte_end":48652,"line_start":143,"line_end":143,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":49367,"byte_end":49388,"line_start":159,"line_end":159,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Encoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible encoder with the specified bit order and symbol size.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":49015,"byte_end":49097,"line_start":154,"line_end":154,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":49102,"byte_end":49105,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":49110,"byte_end":49203,"line_start":156,"line_end":156,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":49208,"byte_end":49301,"line_start":157,"line_end":157,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":49306,"byte_end":49355,"line_start":158,"line_end":158,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50648,"byte_end":50660,"line_start":189,"line_end":189,"column_start":12,"column_end":24},"name":"encode_bytes","qualname":"<Encoder>::encode_bytes","value":"pub fn encode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Encode some bytes from `inp` into `out`.","sig":null,"attributes":[{"value":"/ Encode some bytes from `inp` into `out`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":49952,"byte_end":49996,"line_start":177,"line_end":177,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50001,"byte_end":50004,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (this interface is only available with the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50009,"byte_end":50100,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ `std` feature) and [`finish`] for marking the input data as complete.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50105,"byte_end":50178,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50183,"byte_end":50186,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ When some input byte is invalid, i.e. is not smaller than `1 << size`, then that byte and","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50191,"byte_end":50284,"line_start":182,"line_end":182,"column_start":5,"column_end":98}},{"value":"/ all following ones will _not_ be consumed and the `status` of the result will signal an","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50289,"byte_end":50380,"line_start":183,"line_end":183,"column_start":5,"column_end":96}},{"value":"/ error. The result will also indicate that all bytes up to but not including the offending","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50385,"byte_end":50478,"line_start":184,"line_end":184,"column_start":5,"column_end":98}},{"value":"/ byte have been consumed. You may try again with a fixed byte.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50483,"byte_end":50548,"line_start":185,"line_end":185,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50553,"byte_end":50556,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50561,"byte_end":50601,"line_start":187,"line_end":187,"column_start":5,"column_end":45}},{"value":"/ [`finish`]: #method.finish","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50606,"byte_end":50636,"line_start":188,"line_end":188,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50844,"byte_end":50855,"line_start":195,"line_end":195,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Encoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a encoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a encoder into a writer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50766,"byte_end":50804,"line_start":193,"line_end":193,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":50809,"byte_end":50832,"line_start":194,"line_end":194,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51552,"byte_end":51558,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Mark the encoding as in the process of finishing.","sig":null,"attributes":[{"value":"/ Mark the encoding as in the process of finishing.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51069,"byte_end":51122,"line_start":204,"line_end":204,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51127,"byte_end":51130,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The next following call to `encode_bytes` which is able to consume the complete input will","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51135,"byte_end":51229,"line_start":206,"line_end":206,"column_start":5,"column_end":99}},{"value":"/ also try to emit an end code. It's not recommended, but also not unsound, to use different","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51234,"byte_end":51328,"line_start":207,"line_end":207,"column_start":5,"column_end":99}},{"value":"/ byte slices in different calls from this point forward and thus to 'delay' the actual end","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51333,"byte_end":51426,"line_start":208,"line_end":208,"column_start":5,"column_end":98}},{"value":"/ of the data stream. The behaviour after the end marker has been written is unspecified but","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51431,"byte_end":51525,"line_start":209,"line_end":209,"column_start":5,"column_end":99}},{"value":"/ sound.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51530,"byte_end":51540,"line_start":210,"line_end":210,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52117,"byte_end":52122,"line_start":227,"line_end":227,"column_start":12,"column_end":17},"name":"reset","qualname":"<Encoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51846,"byte_end":51875,"line_start":222,"line_end":222,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51880,"byte_end":51883,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This produce an encoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51888,"byte_end":51983,"line_start":224,"line_end":224,"column_start":5,"column_end":100}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":51988,"byte_end":52075,"line_start":225,"line_end":225,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52080,"byte_end":52105,"line_start":226,"line_end":226,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52410,"byte_end":52416,"line_start":238,"line_end":238,"column_start":12,"column_end":18},"name":"encode","qualname":"<IntoStream>::encode","value":"pub fn encode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader.","sig":null,"attributes":[{"value":"/ Encode data from a reader.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52239,"byte_end":52269,"line_start":234,"line_end":234,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52274,"byte_end":52277,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This will drain the supplied reader. It will not encode an end marker after all data has","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52282,"byte_end":52374,"line_start":236,"line_end":236,"column_start":5,"column_end":97}},{"value":"/ been processed.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52379,"byte_end":52398,"line_start":237,"line_end":237,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52575,"byte_end":52585,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"encode_all","qualname":"<IntoStream>::encode_all","value":"pub fn encode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader and an end marker.\n","sig":null,"attributes":[{"value":"/ Encode data from a reader and an end marker.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52515,"byte_end":52563,"line_start":242,"line_end":242,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53062,"byte_end":53077,"line_start":255,"line_end":255,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate encode buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52682,"byte_end":52733,"line_start":247,"line_end":247,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52738,"byte_end":52741,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the encoded stream when no buffer is","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52746,"byte_end":52841,"line_start":249,"line_end":249,"column_start":5,"column_end":100}},{"value":"/ available and any encoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52846,"byte_end":52937,"line_start":250,"line_end":250,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52942,"byte_end":52980,"line_start":251,"line_end":251,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52985,"byte_end":52988,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52993,"byte_end":53005,"line_start":253,"line_end":253,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53010,"byte_end":53050,"line_start":254,"line_end":254,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53690,"byte_end":53700,"line_start":269,"line_end":269,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate encode buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53211,"byte_end":53272,"line_start":260,"line_end":260,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53277,"byte_end":53280,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53285,"byte_end":53373,"line_start":262,"line_end":262,"column_start":5,"column_end":93}},{"value":"/ instead of a dynamically allocating a buffer. Note that the size of the buffer is relevant","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53378,"byte_end":53472,"line_start":263,"line_end":263,"column_start":5,"column_end":99}},{"value":"/ for efficient encoding as there is additional overhead from `write` calls each time the","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53477,"byte_end":53568,"line_start":264,"line_end":264,"column_start":5,"column_end":96}},{"value":"/ buffer has been filled.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53573,"byte_end":53600,"line_start":265,"line_end":265,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53605,"byte_end":53608,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53613,"byte_end":53625,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":53630,"byte_end":53678,"line_start":268,"line_end":268,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":321},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73615,"byte_end":73627,"line_start":3,"line_end":3,"column_start":12,"column_end":24},"name":"BufferResult","qualname":"::error::BufferResult","value":"BufferResult { consumed_in, consumed_out, status }","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324}],"decl_id":null,"docs":" The result of a coding operation on a pair of buffer.\n","sig":null,"attributes":[{"value":"/ The result of a coding operation on a pair of buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73479,"byte_end":73536,"line_start":1,"line_end":1,"column_start":1,"column_end":58}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73537,"byte_end":73603,"line_start":2,"line_end":2,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":322},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73698,"byte_end":73709,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"name":"consumed_in","qualname":"::error::BufferResult::consumed_in","value":"usize","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73634,"byte_end":73689,"line_start":4,"line_end":4,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":323},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73786,"byte_end":73798,"line_start":7,"line_end":7,"column_start":9,"column_end":21},"name":"consumed_out","qualname":"::error::BufferResult::consumed_out","value":"usize","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" The number of bytes written into the output buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes written into the output buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73722,"byte_end":73777,"line_start":6,"line_end":6,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":324},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73871,"byte_end":73877,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"status","qualname":"::error::BufferResult::status","value":"std::result::Result<error::LzwStatus, error::LzwError>","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" The status after returning from the write call.\n","sig":null,"attributes":[{"value":"/ The status after returning from the write call.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73811,"byte_end":73862,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74061,"byte_end":74073,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::error::StreamResult","value":"StreamResult { bytes_read, bytes_written, status }","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"decl_id":null,"docs":" The result of coding into an output stream.\n","sig":null,"attributes":[{"value":"/ The result of coding into an output stream.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73911,"byte_end":73958,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73959,"byte_end":73982,"line_start":13,"line_end":13,"column_start":1,"column_end":24}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":73983,"byte_end":74049,"line_start":14,"line_end":14,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":326},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74144,"byte_end":74154,"line_start":17,"line_end":17,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::error::StreamResult::bytes_read","value":"usize","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" The total number of bytes consumed from the reader.\n","sig":null,"attributes":[{"value":"/ The total number of bytes consumed from the reader.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74080,"byte_end":74135,"line_start":16,"line_end":16,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":327},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74230,"byte_end":74243,"line_start":19,"line_end":19,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::error::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" The total number of bytes written into the writer.\n","sig":null,"attributes":[{"value":"/ The total number of bytes written into the writer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74167,"byte_end":74221,"line_start":18,"line_end":18,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":328},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74410,"byte_end":74416,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"status","qualname":"::error::StreamResult::status","value":"std::result::Result<(), std::io::Error>","parent":{"krate":0,"index":325},"children":[],"decl_id":null,"docs":" The possible error that occurred.","sig":null,"attributes":[{"value":"/ The possible error that occurred.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74256,"byte_end":74293,"line_start":20,"line_end":20,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74298,"byte_end":74301,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Note that when writing into streams it is not in general possible to recover from an error.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74306,"byte_end":74401,"line_start":22,"line_end":22,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":399},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74584,"byte_end":74586,"line_start":30,"line_end":30,"column_start":5,"column_end":7},"name":"Ok","qualname":"::error::LzwStatus::Ok","value":"LzwStatus::Ok","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Everything went well.\n","sig":null,"attributes":[{"value":"/ Everything went well.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74554,"byte_end":74579,"line_start":29,"line_end":29,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":401},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74949,"byte_end":74959,"line_start":36,"line_end":36,"column_start":5,"column_end":15},"name":"NoProgress","qualname":"::error::LzwStatus::NoProgress","value":"LzwStatus::NoProgress","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" No bytes were read or written and no internal state advanced.","sig":null,"attributes":[{"value":"/ No bytes were read or written and no internal state advanced.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74592,"byte_end":74657,"line_start":31,"line_end":31,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74662,"byte_end":74665,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If this is returned but your application can not provide more input data then decoding is","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74670,"byte_end":74763,"line_start":33,"line_end":33,"column_start":5,"column_end":98}},{"value":"/ definitely stuck for good and it should stop trying and report some error of its own. In","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74768,"byte_end":74860,"line_start":34,"line_end":34,"column_start":5,"column_end":97}},{"value":"/ other situations this may be used as a signal to refill an internal buffer.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74865,"byte_end":74944,"line_start":35,"line_end":35,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":403},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75038,"byte_end":75042,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Done","qualname":"::error::LzwStatus::Done","value":"LzwStatus::Done","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" No more data will be produced because an end marker was reached.\n","sig":null,"attributes":[{"value":"/ No more data will be produced because an end marker was reached.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74965,"byte_end":75033,"line_start":37,"line_end":37,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":398},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74538,"byte_end":74547,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"LzwStatus","qualname":"::error::LzwStatus","value":"pub enum LzwStatus {\n\n    /// Everything went well.\n    Ok,\n\n    /// No bytes were read or written and no internal state advanced.\n    ///\n    /// If this is returned but your application can not provide more input data then decoding is\n    /// definitely stuck for good and it should stop trying and report some error of its own. In\n    /// other situations this may be used as a signal to refill an internal buffer.\n    NoProgress,\n\n    /// No more data will be produced because an end marker was reached.\n    Done,\n}","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403}],"decl_id":null,"docs":" The status after successful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The status after successful coding of an LZW stream.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":74442,"byte_end":74498,"line_start":26,"line_end":26,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":411},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75501,"byte_end":75512,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"name":"InvalidCode","qualname":"::error::LzwError::InvalidCode","value":"LzwError::InvalidCode","parent":{"krate":0,"index":410},"children":[],"decl_id":null,"docs":" The input contained an invalid code.","sig":null,"attributes":[{"value":"/ The input contained an invalid code.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75164,"byte_end":75204,"line_start":44,"line_end":44,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75209,"byte_end":75212,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ For decompression this refers to a code larger than those currently known through the prior","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75217,"byte_end":75312,"line_start":46,"line_end":46,"column_start":5,"column_end":100}},{"value":"/ decoding stages. For compression this refers to a byte that has no code representation due","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75317,"byte_end":75411,"line_start":47,"line_end":47,"column_start":5,"column_end":99}},{"value":"/ to being larger than permitted by the `size` parameter given to the Encoder.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75416,"byte_end":75496,"line_start":48,"line_end":48,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":410},"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75149,"byte_end":75157,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"LzwError","qualname":"::error::LzwError","value":"pub enum LzwError {\n\n    /// The input contained an invalid code.\n    ///\n    /// For decompression this refers to a code larger than those currently known through the prior\n    /// decoding stages. For compression this refers to a byte that has no code representation due\n    /// to being larger than permitted by the `size` parameter given to the Encoder.\n    InvalidCode,\n}","parent":null,"children":[{"krate":0,"index":411}],"decl_id":null,"docs":" The error kind after unsuccessful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The error kind after unsuccessful coding of an LZW stream.","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75047,"byte_end":75109,"line_start":41,"line_end":41,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7358,"byte_end":7365,"line_start":124,"line_end":124,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11487,"byte_end":11497,"line_start":225,"line_end":225,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":16409,"byte_end":16420,"line_start":358,"line_end":358,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":17251,"byte_end":17262,"line_start":387,"line_end":387,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":33706,"byte_end":33717,"line_start":745,"line_end":745,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":34129,"byte_end":34138,"line_start":763,"line_end":763,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":36021,"byte_end":36030,"line_start":832,"line_end":832,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":37872,"byte_end":37878,"line_start":901,"line_end":901,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":39225,"byte_end":39230,"line_start":945,"line_end":945,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":41199,"byte_end":41203,"line_start":1011,"line_end":1011,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48309,"byte_end":48316,"line_start":138,"line_end":138,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52215,"byte_end":52225,"line_start":233,"line_end":233,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":56245,"byte_end":56256,"line_start":353,"line_end":353,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":56744,"byte_end":56755,"line_start":372,"line_end":372,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":60345,"byte_end":60356,"line_start":479,"line_end":479,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":60810,"byte_end":60819,"line_start":501,"line_end":501,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":62362,"byte_end":62371,"line_start":563,"line_end":563,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":63846,"byte_end":63850,"line_start":624,"line_end":624,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68211,"byte_end":68218,"line_start":736,"line_end":736,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68303,"byte_end":68309,"line_start":742,"line_end":742,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68488,"byte_end":68495,"line_start":752,"line_end":752,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68772,"byte_end":68785,"line_start":762,"line_end":762,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75545,"byte_end":75553,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75798,"byte_end":75806,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2928,"byte_end":2934,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":21}},{"kind":"Mod","span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/lib.rs","byte_start":2970,"byte_end":2976,"line_start":77,"line_end":77,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":173}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":7358,"byte_end":7365,"line_start":124,"line_end":124,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":11487,"byte_end":11497,"line_start":225,"line_end":225,"column_start":20,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":16409,"byte_end":16420,"line_start":358,"line_end":358,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":65},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":17251,"byte_end":17262,"line_start":387,"line_end":387,"column_start":34,"column_end":45},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":65},"to":{"krate":0,"index":51}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":33706,"byte_end":33717,"line_start":745,"line_end":745,"column_start":21,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":65},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":34129,"byte_end":34138,"line_start":763,"line_end":763,"column_start":21,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":342},"to":{"krate":0,"index":56}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":36021,"byte_end":36030,"line_start":832,"line_end":832,"column_start":21,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":349},"to":{"krate":0,"index":56}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":37872,"byte_end":37878,"line_start":901,"line_end":901,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":77},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":39225,"byte_end":39230,"line_start":945,"line_end":945,"column_start":6,"column_end":11},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/decode.rs","byte_start":41199,"byte_end":41203,"line_start":1011,"line_end":1011,"column_start":6,"column_end":10},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":48309,"byte_end":48316,"line_start":138,"line_end":138,"column_start":6,"column_end":13},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":52215,"byte_end":52225,"line_start":233,"line_end":233,"column_start":20,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":56245,"byte_end":56256,"line_start":353,"line_end":353,"column_start":17,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":56744,"byte_end":56755,"line_start":372,"line_end":372,"column_start":30,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":207},"to":{"krate":0,"index":202}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":60345,"byte_end":60356,"line_start":479,"line_end":479,"column_start":17,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":60810,"byte_end":60819,"line_start":501,"line_end":501,"column_start":17,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":216},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":62362,"byte_end":62371,"line_start":563,"line_end":563,"column_start":17,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":220},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":63846,"byte_end":63850,"line_start":624,"line_end":624,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68211,"byte_end":68218,"line_start":736,"line_end":736,"column_start":18,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":362},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68303,"byte_end":68309,"line_start":742,"line_end":742,"column_start":18,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68488,"byte_end":68495,"line_start":752,"line_end":752,"column_start":30,"column_end":37},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":362},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/encode.rs","byte_start":68772,"byte_end":68785,"line_start":762,"line_end":762,"column_start":24,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":374},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75545,"byte_end":75553,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/Users/marcpartensky/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.2/src/error.rs","byte_start":75798,"byte_end":75806,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":1690}}]}